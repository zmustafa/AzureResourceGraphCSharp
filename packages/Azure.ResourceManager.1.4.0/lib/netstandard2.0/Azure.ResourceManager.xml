<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.ResourceManager</name>
    </assembly>
    <members>
        <member name="T:Azure.ResourceManager.ArmClient">
            <summary>
            The entry point for all ARM clients.
            </summary>
            <summary>
            The entry point for all ARM clients.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.ResourceManager.ArmClient" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.#ctor(Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.ResourceManager.ArmClient" /> class.
            </summary>
            <param name="credential"> A credential used to authenticate to an Azure Service. </param>
            <exception cref="T:System.ArgumentNullException"> If <see cref="T:Azure.Core.TokenCredential" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.#ctor(Azure.Core.TokenCredential,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.ResourceManager.ArmClient" /> class.
            </summary>
            <param name="credential"> A credential used to authenticate to an Azure Service. </param>
            <param name="defaultSubscriptionId"> The id of the default Azure subscription. </param>
            <exception cref="T:System.ArgumentNullException"> If <see cref="T:Azure.Core.TokenCredential" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.#ctor(Azure.Core.TokenCredential,System.String,Azure.ResourceManager.ArmClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.ResourceManager.ArmClient" /> class.
            </summary>
            <param name="credential"> A credential used to authenticate to an Azure Service. </param>
            <param name="defaultSubscriptionId"> The id of the default Azure subscription. </param>
            <param name="options"> The client parameters to use in these operations. </param>
            <exception cref="T:System.ArgumentNullException"> If <see cref="T:Azure.Core.TokenCredential" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.TryGetApiVersion(Azure.Core.ResourceType,System.String@)">
            <summary>
            Gets the api version override if it has been set for the current client options.
            </summary>
            <param name="resourceType"> The resource type to get the version for. </param>
            <param name="apiVersion"> The api version to variable to set. </param>
        </member>
        <member name="P:Azure.ResourceManager.ArmClient.Diagnostics">
            <summary>
            Gets the diagnostic options used for this client.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmClient.Endpoint">
            <summary>
            Gets the base URI of the service.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmClient.Pipeline">
            <summary>
            Gets the HTTP pipeline.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetSubscriptions">
            <summary>
            Gets the Azure subscriptions.
            </summary>
            <returns> Subscription collection. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetTenants">
            <summary>
            Gets the tenants.
            </summary>
            <returns> Tenant collection. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetDefaultSubscription(System.Threading.CancellationToken)">
            <summary>
            Gets the default subscription.
            </summary>
            <returns> Resource operations of the Subscription. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetDefaultSubscriptionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the default subscription.
            </summary>
            <returns> Resource operations of the Subscription. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetGenericResources">
            <summary> Gets a collection of GenericResources. </summary>
            <returns> An object representing collection of GenericResources and their operations. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetTenantResourceProviders(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="top"> [This parameter is no longer supported.] The number of results to return. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetTenantResourceProvidersAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="top"> [This parameter is no longer supported.] The number of results to return. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetTenantResourceProviders(System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetTenantResourceProvidersAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetTenantResourceProvider(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider at the tenant level. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetTenantResourceProviderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider at the tenant level. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetManagementGroups">
            <summary>
            Gets the management group collection for this tenant.
            </summary>
            <returns> A collection of the management groups. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetResourceClient``1(System.Func{``0})">
            <summary>
            Gets a client using this instance of ArmClient to copy the client settings from.
            </summary>
            <typeparam name="T"> The type of <see cref="T:Azure.ResourceManager.ArmResource" /> that will be constructed. </typeparam>
            <param name="resourceFactory"> Delegate method that will construct the client. </param>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetManagementGroupResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetGenericResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.GenericResource" /> along with the instance operations that can be performed on it but with no data.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.GenericResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetPolicyAssignmentResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetResourceProviderResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.ResourceProviderResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetResourceGroupResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.ResourceGroupResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetTagResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.TagResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.TagResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.TagResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.TagResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetSubscriptionPolicyDefinitionResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetTenantPolicyDefinitionResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetManagementGroupPolicyDefinitionResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetSubscriptionPolicySetDefinitionResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetTenantPolicySetDefinitionResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetManagementGroupPolicySetDefinitionResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetDataPolicyManifestResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.DataPolicyManifestResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetManagementLockResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.ManagementLockResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetSubscriptionResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.SubscriptionResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmClient.GetFeatureResource(Azure.Core.ResourceIdentifier)">
            <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Resources.FeatureResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> <see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
            <param name="id"> The resource ID of the resource to get. </param>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> object. </returns>
        </member>
        <member name="T:Azure.ResourceManager.ArmClientOptions">
            <summary>
            A class representing Azure resource manager client options.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmClientOptions.Environment">
            <summary>
            Gets or sets Azure cloud environment.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmClientOptions.SetApiVersion(Azure.Core.ResourceType,System.String)">
            <summary>
            Sets the api version to use for a given resource type.
            To find which API Versions are available in your environment you can use the <see cref="M:Azure.ResourceManager.Resources.ResourceProviderResource.Get(System.String,System.Threading.CancellationToken)" /> method
            for the provider namespace you are interested in.
            </summary>
            <param name="resourceType"> The resource type to set the version for. </param>
            <param name="apiVersion"> The api version to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ArmClientOptions.SetApiVersionsFromProfile(Azure.ResourceManager.AzureStackProfile)">
            <summary>
            Sets the api versions from an Azure Stack profile.
            </summary>
        </member>
        <member name="T:Azure.ResourceManager.ArmCollection">
            <summary>
            Base class representing collection of resources.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.ResourceManager.ArmCollection" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.ResourceManager.ArmCollection" /> class.
            </summary>
            <param name="client"> The client to copy settings from. </param>
            <param name="id"> The id of the parent for the collection. </param>
        </member>
        <member name="P:Azure.ResourceManager.ArmCollection.Id">
            <summary>
            Gets the resource identifier.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmCollection.Client">
            <summary>
            Gets the <see cref="T:Azure.ResourceManager.ArmClient" /> this resource client was created from.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmCollection.Diagnostics">
            <summary>
            Gets the diagnostic options for this resource client.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmCollection.Pipeline">
            <summary>
            Gets the pipeline for this resource client.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmCollection.Endpoint">
            <summary>
            Gets the base uri for this resource client.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmCollection.TryGetApiVersion(Azure.Core.ResourceType,System.String@)">
            <summary>
            Gets the api version override if it has been set for the current client options.
            </summary>
            <param name="resourceType"> The resource type to get the version for. </param>
            <param name="apiVersion"> The api version to variable to set. </param>
        </member>
        <member name="M:Azure.ResourceManager.ArmCollection.GetCachedClient``1(System.Func{Azure.ResourceManager.ArmClient,``0})">
            <summary>
            Gets a cached client to use for extension methods.
            </summary>
            <typeparam name="T"> The type of client to get. </typeparam>
            <param name="clientFactory"> The constructor factory for the client. </param>
        </member>
        <member name="T:Azure.ResourceManager.ArmEnvironment">
            <summary>
            ArmEnvrionment represents the information of an Azure Cloud environment.
            </summary>
        </member>
        <member name="F:Azure.ResourceManager.ArmEnvironment.AzurePublicCloud">
            <summary> Azure Public Cloud. </summary>
        </member>
        <member name="F:Azure.ResourceManager.ArmEnvironment.AzureChina">
            <summary> Azure China Cloud. </summary>
        </member>
        <member name="F:Azure.ResourceManager.ArmEnvironment.AzureGovernment">
            <summary> Azure US Government. </summary>
        </member>
        <member name="F:Azure.ResourceManager.ArmEnvironment.AzureGermany">
            <summary> Azure German Cloud. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmEnvironment.Endpoint">
            <summary>
            Gets base URI of the management API endpoint.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmEnvironment.Audience">
            <summary>
            Gets authentication audience.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmEnvironment.DefaultScope">
            <summary>
            Gets default authentication scope.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmEnvironment.#ctor(System.Uri,System.String)">
            <summary>
            Construct an <see cref="T:Azure.ResourceManager.ArmEnvironment" /> using the given value.
            </summary>
            <param name="endpoint">Management API endpoint base URI.</param>
            <param name="audience">Authentication audience.</param>
        </member>
        <member name="M:Azure.ResourceManager.ArmEnvironment.op_Equality(Azure.ResourceManager.ArmEnvironment,Azure.ResourceManager.ArmEnvironment)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.ArmEnvironment" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmEnvironment.op_Inequality(Azure.ResourceManager.ArmEnvironment,Azure.ResourceManager.ArmEnvironment)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.ArmEnvironment" /> values are not the same. </summary>internal
        </member>
        <member name="M:Azure.ResourceManager.ArmEnvironment.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmEnvironment.Equals(Azure.ResourceManager.ArmEnvironment)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmEnvironment.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmEnvironment.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.ArmOperation">
            <summary>
            Represents a long-running operation.
            </summary>
        </member>
        <member name="T:Azure.ResourceManager.ArmOperation`1">
            <summary>
            Represents a long-running operation that returns a value when it completes.
            </summary><typeparam name="T">The final result of the long-running operation.</typeparam>
        </member>
        <member name="T:Azure.ResourceManager.ArmResource">
            <summary>
            A class representing the operations that can be performed over a specific resource.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.ResourceManager.ArmResource" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.ResourceManager.ArmResource" /> class.
            </summary>
            <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> this resource client should be created from. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="P:Azure.ResourceManager.ArmResource.Id">
            <summary>
            Gets the resource identifier.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmResource.Client">
            <summary>
            Gets the <see cref="T:Azure.ResourceManager.ArmClient" /> this resource client was created from.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmResource.Diagnostics">
            <summary>
            Gets the diagnostic options for this resource client.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmResource.Pipeline">
            <summary>
            Gets the pipeline for this resource client.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ArmResource.Endpoint">
            <summary>
            Gets the base uri for this resource client.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.TryGetApiVersion(Azure.Core.ResourceType,System.String@)">
            <summary>
            Gets the api version override if it has been set for the current client options.
            </summary>
            <param name="resourceType"> The resource type to get the version for. </param>
            <param name="apiVersion"> The api version to variable to set. </param>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.GetAvailableLocations(System.Threading.CancellationToken)">
            <summary>
            Lists all available geo-locations.
            </summary>
            <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="P:System.Threading.CancellationToken.None" />. </param>
            <returns> A collection of location that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.GetAvailableLocationsAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all available geo-locations.
            </summary>
            <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="P:System.Threading.CancellationToken.None" />. </param>
            <returns> A collection of location that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.GetCachedClient``1(System.Func{Azure.ResourceManager.ArmClient,``0})">
            <summary>
            Gets a cached client to use for extension methods.
            </summary>
            <typeparam name="T"> The type of client to get. </typeparam>
            <param name="clientFactory"> The constructor factory for the client. </param>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.CanUseTagResource(System.Threading.CancellationToken)">
            <summary>
            Checks to see if the TagResource API is deployed in the current environment.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.CanUseTagResourceAsync(System.Threading.CancellationToken)">
            <summary>
            Checks to see if the TagResource API is deployed in the current environment.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.GetTagResource">
            <summary> Gets an object representing a TagResource along with the instance operations that can be performed on it in the ArmResource. </summary>
            <returns> Returns a <see cref="T:Azure.ResourceManager.Resources.TagResource" /> object. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.GetPolicyAssignments">
            <summary> Gets a collection of PolicyAssignmentResources in the ArmResource. </summary>
            <returns> An object representing collection of PolicyAssignmentResources and their operations over a PolicyAssignmentResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.GetPolicyAssignmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a single policy assignment, given its name and the scope it was created at.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.GetPolicyAssignment(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a single policy assignment, given its name and the scope it was created at.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.GetManagementLocks">
            <summary> Gets a collection of ManagementLockResources in the ArmResource. </summary>
            <returns> An object representing collection of ManagementLockResources and their operations over a ManagementLockResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.GetManagementLockAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_GetByScope</description>
            </item>
            </list>
            </summary>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ArmResource.GetManagementLock(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_GetByScope</description>
            </item>
            </list>
            </summary>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.AzureStackProfile">
            <summary>
            AzureStackProfile represents the information of an Azure Stack profile.
            </summary>
        </member>
        <member name="F:Azure.ResourceManager.AzureStackProfile.Profile20200901Hybrid">
            <summary> The 2020-09-01-hybrid profile. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.ArmPlan">
            <summary>
            Representation of a publisher plan for marketplace RPs.
            </summary>
            <summary> Plan for the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmPlan.Equals(Azure.ResourceManager.Models.ArmPlan)">
            <summary>
            Compares this <see cref="T:Azure.ResourceManager.Models.ArmPlan" /> instance with another object and determines if they are equals.
            </summary>
            <param name="other"> <see cref="T:Azure.ResourceManager.Models.ArmPlan" /> object to compare. </param>
            <returns> True if they are equals, otherwise false. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmPlan.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmPlan.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmPlan.op_Equality(Azure.ResourceManager.Models.ArmPlan,Azure.ResourceManager.Models.ArmPlan)">
            <summary>
            Compares this <see cref="T:Azure.ResourceManager.Models.ArmPlan" /> instance with another object and determines if they are equals.
            </summary>
            <param name="left"> The object on the left side of the operator. </param>
            <param name="right"> The object on the right side of the operator. </param>
            <returns> True if they are equal, otherwise false. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmPlan.op_Inequality(Azure.ResourceManager.Models.ArmPlan,Azure.ResourceManager.Models.ArmPlan)">
            <summary>
            Compares this <see cref="T:Azure.ResourceManager.Models.ArmPlan" /> instance with another object and determines if they are equals.
            </summary>
            <param name="left"> The object on the left side of the operator. </param>
            <param name="right"> The object on the right side of the operator. </param>
            <returns> True if they are not equal, otherwise false. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmPlan.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of ArmPlan. </summary>
            <param name="name"> A user defined name of the 3rd Party Artifact that is being procured. </param>
            <param name="publisher"> The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic. </param>
            <param name="product"> The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" />, <paramref name="publisher" /> or <paramref name="product" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmPlan.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of ArmPlan. </summary>
            <param name="name"> A user defined name of the 3rd Party Artifact that is being procured. </param>
            <param name="publisher"> The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic. </param>
            <param name="product"> The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. </param>
            <param name="promotionCode"> A publisher provided promotion code as provisioned in Data Market for the said product/artifact. </param>
            <param name="version"> The version of the desired product/artifact. </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.ArmPlan.Name">
            <summary> A user defined name of the 3rd Party Artifact that is being procured. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ArmPlan.Publisher">
            <summary> The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ArmPlan.Product">
            <summary> The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ArmPlan.PromotionCode">
            <summary> A publisher provided promotion code as provisioned in Data Market for the said product/artifact. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ArmPlan.Version">
            <summary> The version of the desired product/artifact. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.ArmSku">
            <summary>
            A class representing SKU for resource.
            </summary>
            <summary> The resource model definition representing SKU. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmSku.Equals(Azure.ResourceManager.Models.ArmSku)">
            <summary>
            Compares this <see cref="T:Azure.ResourceManager.Models.ArmSku" /> instance with another object and determines if they are equals.
            </summary>
            <param name="other"> <see cref="T:Azure.ResourceManager.Models.ArmSku" /> object to compare. </param>
            <returns> True if they are equals, otherwise false. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmSku.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmSku.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmSku.op_Equality(Azure.ResourceManager.Models.ArmSku,Azure.ResourceManager.Models.ArmSku)">
            <summary>
            Compares this <see cref="T:Azure.ResourceManager.Models.ArmSku" /> instance with another object and determines if they are equals.
            </summary>
            <param name="left"> The sku on the left side of the operator. </param>
            <param name="right"> The sku on the right side of the operator. </param>
            <returns> True if they are equal, otherwise false. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmSku.op_Inequality(Azure.ResourceManager.Models.ArmSku,Azure.ResourceManager.Models.ArmSku)">
            <summary>
            Compares this <see cref="T:Azure.ResourceManager.Models.ArmSku" /> instance with another object and determines if they are not equal.
            </summary>
            <param name="left"> The sku on the left side of the operator. </param>
            <param name="right"> The sku on the right side of the operator. </param>
            <returns> True if they are not equal, otherwise false. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmSku.#ctor(System.String)">
            <summary> Initializes a new instance of ArmSku. </summary>
            <param name="name"> The name of the SKU. Ex - P3. It is typically a letter+number code. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Models.ArmSku.#ctor(System.String,System.Nullable{Azure.ResourceManager.Models.ArmSkuTier},System.String,System.String,System.Nullable{System.Int32})">
            <summary> Initializes a new instance of ArmSku. </summary>
            <param name="name"> The name of the SKU. Ex - P3. It is typically a letter+number code. </param>
            <param name="tier"> This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. </param>
            <param name="size"> The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. </param>
            <param name="family"> If the service has different generations of hardware, for the same SKU, then that can be captured here. </param>
            <param name="capacity"> If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.ArmSku.Name">
            <summary> The name of the SKU. Ex - P3. It is typically a letter+number code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ArmSku.Tier">
            <summary> This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ArmSku.Size">
            <summary> The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ArmSku.Family">
            <summary> If the service has different generations of hardware, for the same SKU, then that can be captured here. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ArmSku.Capacity">
            <summary> If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.EncryptionProperties">
            <summary> Configuration of key for data encryption. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.EncryptionProperties.#ctor">
            <summary> Initializes a new instance of EncryptionProperties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.EncryptionProperties.#ctor(System.Nullable{Azure.ResourceManager.Models.EncryptionStatus},Azure.ResourceManager.Models.KeyVaultProperties)">
            <summary> Initializes a new instance of EncryptionProperties. </summary>
            <param name="status"> Indicates whether or not the encryption is enabled for container registry. </param>
            <param name="keyVaultProperties"> Key vault properties. </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.EncryptionProperties.Status">
            <summary> Indicates whether or not the encryption is enabled for container registry. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.EncryptionProperties.KeyVaultProperties">
            <summary> Key vault properties. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.EncryptionStatus">
            <summary> Indicates whether or not the encryption is enabled for container registry. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.EncryptionStatus.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Models.EncryptionStatus" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Models.EncryptionStatus.Enabled">
            <summary> enabled. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.EncryptionStatus.Disabled">
            <summary> disabled. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.EncryptionStatus.op_Equality(Azure.ResourceManager.Models.EncryptionStatus,Azure.ResourceManager.Models.EncryptionStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Models.EncryptionStatus" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.EncryptionStatus.op_Inequality(Azure.ResourceManager.Models.EncryptionStatus,Azure.ResourceManager.Models.EncryptionStatus)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Models.EncryptionStatus" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.EncryptionStatus.op_Implicit(System.String)~Azure.ResourceManager.Models.EncryptionStatus">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Models.EncryptionStatus" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.EncryptionStatus.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.EncryptionStatus.Equals(Azure.ResourceManager.Models.EncryptionStatus)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.EncryptionStatus.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.EncryptionStatus.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Models.KeyVaultProperties">
            <summary> The KeyVaultProperties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.KeyVaultProperties.#ctor">
            <summary> Initializes a new instance of KeyVaultProperties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.KeyVaultProperties.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of KeyVaultProperties. </summary>
            <param name="keyIdentifier"> Key vault uri to access the encryption key. </param>
            <param name="identity"> The client ID of the identity which will be used to access key vault. </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.KeyVaultProperties.KeyIdentifier">
            <summary> Key vault uri to access the encryption key. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.KeyVaultProperties.Identity">
            <summary> The client ID of the identity which will be used to access key vault. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.ManagedServiceIdentity">
            <summary> Managed service identity (system assigned and/or user assigned identities). </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentity.#ctor(Azure.ResourceManager.Models.ManagedServiceIdentityType)">
            <summary> Initializes a new instance of ManagedServiceIdentity. </summary>
            <param name="managedServiceIdentityType"> Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). </param>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentity.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid},Azure.ResourceManager.Models.ManagedServiceIdentityType,System.Collections.Generic.IDictionary{Azure.Core.ResourceIdentifier,Azure.ResourceManager.Models.UserAssignedIdentity})">
            <summary> Initializes a new instance of ManagedServiceIdentity. </summary>
            <param name="principalId"> The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity. </param>
            <param name="tenantId"> The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity. </param>
            <param name="managedServiceIdentityType"> Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). </param>
            <param name="userAssignedIdentities"> The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.ManagedServiceIdentity.PrincipalId">
            <summary> The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ManagedServiceIdentity.TenantId">
            <summary> The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ManagedServiceIdentity.ManagedServiceIdentityType">
            <summary> Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ManagedServiceIdentity.UserAssignedIdentities">
            <summary> The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.ManagedServiceIdentityType">
            <summary> Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). </summary>
            <summary> Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Models.ManagedServiceIdentityType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Models.ManagedServiceIdentityType.None">
            <summary> None. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ManagedServiceIdentityType.SystemAssigned">
            <summary> SystemAssigned. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ManagedServiceIdentityType.UserAssigned">
            <summary> UserAssigned. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ManagedServiceIdentityType.SystemAssignedUserAssigned">
            <summary> SystemAssigned, UserAssigned. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityType.op_Equality(Azure.ResourceManager.Models.ManagedServiceIdentityType,Azure.ResourceManager.Models.ManagedServiceIdentityType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Models.ManagedServiceIdentityType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityType.op_Inequality(Azure.ResourceManager.Models.ManagedServiceIdentityType,Azure.ResourceManager.Models.ManagedServiceIdentityType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Models.ManagedServiceIdentityType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityType.op_Implicit(System.String)~Azure.ResourceManager.Models.ManagedServiceIdentityType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Models.ManagedServiceIdentityType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityType.Equals(Azure.ResourceManager.Models.ManagedServiceIdentityType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Models.ResourceData">
            <summary> Common fields that are returned in the response for all Azure Resource Manager resources. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ResourceData.#ctor">
            <summary> Initializes a new instance of Resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ResourceData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData)">
            <summary> Initializes a new instance of Resource. </summary>
            <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
            <param name="name"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
            <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.ResourceData.Id">
            <summary> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ResourceData.Name">
            <summary> The name of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ResourceData.ResourceType">
            <summary> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.ResourceData.SystemData">
            <summary> Azure Resource Manager metadata containing createdBy and modifiedBy information. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.SystemAssignedServiceIdentity">
            <summary> Managed service identity (either system assigned, or none). </summary>
            <summary> Managed service identity (either system assigned, or none). </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemAssignedServiceIdentity.#ctor(Azure.ResourceManager.Models.SystemAssignedServiceIdentityType)">
            <summary> Initializes a new instance of SystemAssignedServiceIdentity. </summary>
            <param name="systemAssignedServiceIdentityType"> Type of managed service identity (either system assigned, or none). </param>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemAssignedServiceIdentity.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid},Azure.ResourceManager.Models.SystemAssignedServiceIdentityType)">
            <summary> Initializes a new instance of SystemAssignedServiceIdentity. </summary>
            <param name="principalId"> The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity. </param>
            <param name="tenantId"> The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity. </param>
            <param name="systemAssignedServiceIdentityType"> Type of managed service identity (either system assigned, or none). </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemAssignedServiceIdentity.PrincipalId">
            <summary> The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemAssignedServiceIdentity.TenantId">
            <summary> The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemAssignedServiceIdentity.SystemAssignedServiceIdentityType">
            <summary> Type of managed service identity (either system assigned, or none). </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType">
            <summary> Type of managed service identity (either system assigned, or none). </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType.None">
            <summary> None. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType.SystemAssigned">
            <summary> SystemAssigned. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType.op_Equality(Azure.ResourceManager.Models.SystemAssignedServiceIdentityType,Azure.ResourceManager.Models.SystemAssignedServiceIdentityType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType.op_Inequality(Azure.ResourceManager.Models.SystemAssignedServiceIdentityType,Azure.ResourceManager.Models.SystemAssignedServiceIdentityType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType.op_Implicit(System.String)~Azure.ResourceManager.Models.SystemAssignedServiceIdentityType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType.Equals(Azure.ResourceManager.Models.SystemAssignedServiceIdentityType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemAssignedServiceIdentityType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Models.TrackedResourceData">
            <summary> The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.TrackedResourceData.#ctor(Azure.Core.AzureLocation)">
            <summary> Initializes a new instance of TrackedResource. </summary>
            <param name="location"> The geo-location where the resource lives. </param>
        </member>
        <member name="M:Azure.ResourceManager.Models.TrackedResourceData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation)">
            <summary> Initializes a new instance of TrackedResource. </summary>
            <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
            <param name="name"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
            <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
            <param name="tags"> Resource tags. </param>
            <param name="location"> The geo-location where the resource lives. </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.TrackedResourceData.Tags">
            <summary> Resource tags. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.TrackedResourceData.Location">
            <summary> The geo-location where the resource lives. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.ArmSkuTier">
            <summary> This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Models.ArmSkuTier.Free">
            <summary> Free. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Models.ArmSkuTier.Basic">
            <summary> Basic. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Models.ArmSkuTier.Standard">
            <summary> Standard. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Models.ArmSkuTier.Premium">
            <summary> Premium. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.CreatedByType">
            <summary> The type of identity that created the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.CreatedByType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Models.CreatedByType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Models.CreatedByType.User">
            <summary> User. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.CreatedByType.Application">
            <summary> Application. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.CreatedByType.ManagedIdentity">
            <summary> ManagedIdentity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.CreatedByType.Key">
            <summary> Key. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.CreatedByType.op_Equality(Azure.ResourceManager.Models.CreatedByType,Azure.ResourceManager.Models.CreatedByType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Models.CreatedByType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.CreatedByType.op_Inequality(Azure.ResourceManager.Models.CreatedByType,Azure.ResourceManager.Models.CreatedByType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Models.CreatedByType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.CreatedByType.op_Implicit(System.String)~Azure.ResourceManager.Models.CreatedByType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Models.CreatedByType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.CreatedByType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.CreatedByType.Equals(Azure.ResourceManager.Models.CreatedByType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.CreatedByType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.CreatedByType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Models.OperationStatusResult">
            <summary> The current status of an async operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.OperationStatusResult.#ctor(System.String)">
            <summary> Initializes a new instance of OperationStatusResult. </summary>
            <param name="status"> Operation status. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="status" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Models.OperationStatusResult.#ctor(Azure.Core.ResourceIdentifier,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Models.OperationStatusResult},Azure.ResponseError)">
            <summary> Initializes a new instance of OperationStatusResult. </summary>
            <param name="id"> Fully qualified ID for the async operation. </param>
            <param name="name"> Name of the async operation. </param>
            <param name="status"> Operation status. </param>
            <param name="percentComplete"> Percent of the operation that is complete. </param>
            <param name="startOn"> The start time of the operation. </param>
            <param name="endOn"> The end time of the operation. </param>
            <param name="operations"> The operations list. </param>
            <param name="error"> If present, details of the operation error. </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.OperationStatusResult.Id">
            <summary> Fully qualified ID for the async operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.OperationStatusResult.Name">
            <summary> Name of the async operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.OperationStatusResult.Status">
            <summary> Operation status. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.OperationStatusResult.PercentComplete">
            <summary> Percent of the operation that is complete. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.OperationStatusResult.StartOn">
            <summary> The start time of the operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.OperationStatusResult.EndOn">
            <summary> The end time of the operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.OperationStatusResult.Operations">
            <summary> The operations list. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.OperationStatusResult.Error">
            <summary> If present, details of the operation error. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.SystemData">
            <summary> Metadata pertaining to creation and last modification of the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemData.#ctor">
            <summary> Initializes a new instance of SystemData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.SystemData.#ctor(System.String,System.Nullable{Azure.ResourceManager.Models.CreatedByType},System.Nullable{System.DateTimeOffset},System.String,System.Nullable{Azure.ResourceManager.Models.CreatedByType},System.Nullable{System.DateTimeOffset})">
            <summary> Initializes a new instance of SystemData. </summary>
            <param name="createdBy"> The identity that created the resource. </param>
            <param name="createdByType"> The type of identity that created the resource. </param>
            <param name="createdOn"> The timestamp of resource creation (UTC). </param>
            <param name="lastModifiedBy"> The identity that last modified the resource. </param>
            <param name="lastModifiedByType"> The type of identity that last modified the resource. </param>
            <param name="lastModifiedOn"> The timestamp of resource last modification (UTC). </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemData.CreatedBy">
            <summary> The identity that created the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemData.CreatedByType">
            <summary> The type of identity that created the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemData.CreatedOn">
            <summary> The timestamp of resource creation (UTC). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemData.LastModifiedBy">
            <summary> The identity that last modified the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemData.LastModifiedByType">
            <summary> The type of identity that last modified the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.SystemData.LastModifiedOn">
            <summary> The timestamp of resource last modification (UTC). </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.UserAssignedIdentity">
            <summary> User assigned identity properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.UserAssignedIdentity.#ctor">
            <summary> Initializes a new instance of UserAssignedIdentity. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.UserAssignedIdentity.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary> Initializes a new instance of UserAssignedIdentity. </summary>
            <param name="principalId"> The principal ID of the assigned identity. </param>
            <param name="clientId"> The client ID of the assigned identity. </param>
        </member>
        <member name="P:Azure.ResourceManager.Models.UserAssignedIdentity.PrincipalId">
            <summary> The principal ID of the assigned identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Models.UserAssignedIdentity.ClientId">
            <summary> The client ID of the assigned identity. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Models.ResourceManagerModelFactory">
            <summary> Model factory for read-only models. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ResourceManagerModelFactory.SubResource(Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of SubResource. </summary>
            <param name="id"></param>
            <returns> A new <see cref="T:Azure.ResourceManager.Resources.Models.SubResource" /> instance for mocking. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Models.ResourceManagerModelFactory.WritableSubResource(Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of WritableSubResource. </summary>
            <param name="id"></param>
            <returns> A new <see cref="T:Azure.ResourceManager.Resources.Models.WritableSubResource" /> instance for mocking. </returns>
        </member>
        <member name="T:Azure.ResourceManager.Models.ManagedServiceIdentityTypeV3Converter">
            <summary> JsonConverter for managed service identity type v3. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityTypeV3Converter.Write(System.Text.Json.Utf8JsonWriter,Azure.ResourceManager.Models.ManagedServiceIdentityType,System.Text.Json.JsonSerializerOptions)">
            <summary> Serialize managed service identity type to v3 format. </summary>
            <param name="writer"> The writer. </param>
            <param name="model"> The ManagedServiceIdentityType model which is v4. </param>
            <param name="options"> The options for JsonSerializer. </param>
        </member>
        <member name="M:Azure.ResourceManager.Models.ManagedServiceIdentityTypeV3Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary> Deserialize managed service identity type from v3 format. </summary>
            <param name="reader"> The reader. </param>
            <param name="typeToConvert"> The type to convert </param>
            <param name="options"> The options for JsonSerializer. </param>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource">
            <summary> A Class representing a ManagementGroup along with the instance operations that can be performed on it. </summary>
            <summary>
            A Class representing a ManagementGroup along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetManagementGroupResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> using the GetManagementGroup method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.CreateResourceIdentifier(System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.ManagementGroups.ManagementGroupData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.GetAsync(System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the details of the management group.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
            <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
            <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.Get(System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the details of the management group.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
            <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
            <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.DeleteAsync(Azure.WaitUntil,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete management group.
            If a management group contains child resources, the request will fail.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Delete</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.Delete(Azure.WaitUntil,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete management group.
            If a management group contains child resources, the request will fail.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Delete</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.UpdateAsync(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPatch,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a management group.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Update</description>
            </item>
            </list>
            </summary>
            <param name="patch"> Management group patch parameters. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="patch" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.Update(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPatch,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a management group.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Update</description>
            </item>
            </list>
            </summary>
            <param name="patch"> Management group patch parameters. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="patch" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.GetDescendantsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List all entities that descend from a management group.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}/descendants</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_GetDescendants</description>
            </item>
            </list>
            </summary>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="top"> Number of elements to return when retrieving results. Passing this in will override $skipToken. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.ManagementGroups.Models.DescendantData" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.GetDescendants(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List all entities that descend from a management group.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}/descendants</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_GetDescendants</description>
            </item>
            </list>
            </summary>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="top"> Number of elements to return when retrieving results. Passing this in will override $skipToken. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.ManagementGroups.Models.DescendantData" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.GetManagementGroupPolicyDefinitions">
            <summary> Gets a collection of ManagementGroupPolicyDefinitionResources in the ManagementGroupResource. </summary>
            <returns> An object representing collection of ManagementGroupPolicyDefinitionResources and their operations over a ManagementGroupPolicyDefinitionResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.GetManagementGroupPolicyDefinitionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.GetManagementGroupPolicyDefinition(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.GetManagementGroupPolicySetDefinitions">
            <summary> Gets a collection of ManagementGroupPolicySetDefinitionResources in the ManagementGroupResource. </summary>
            <returns> An object representing collection of ManagementGroupPolicySetDefinitionResources and their operations over a ManagementGroupPolicySetDefinitionResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.GetManagementGroupPolicySetDefinitionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupResource.GetManagementGroupPolicySetDefinition(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation.#ctor">
            <summary> Initializes a new instance of ManagementGroupsArmOperation for mocking. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.#ctor">
            <summary> Initializes a new instance of ManagementGroupsArmOperation for mocking. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsArmOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            To get a <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection" /> instance call the GetManagementGroups method from an instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent,System.String,System.Threading.CancellationToken)">
            <summary>
            Create or update a management group.
            If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="groupId"> Management Group ID. </param>
            <param name="content"> Management group creation parameters. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> or <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent,System.String,System.Threading.CancellationToken)">
            <summary>
            Create or update a management group.
            If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="groupId"> Management Group ID. </param>
            <param name="content"> Management group creation parameters. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> or <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.GetAsync(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the details of the management group.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
            <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
            <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.Get(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the details of the management group.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
            <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
            <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.GetAllAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List management groups for the authenticated user.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_List</description>
            </item>
            </list>
            </summary>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.GetAll(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List management groups for the authenticated user.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_List</description>
            </item>
            </list>
            </summary>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CheckNameAvailabilityAsync(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent,System.Threading.CancellationToken)">
            <summary>
            Checks if the specified management group name is valid and unique
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/checkNameAvailability</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_CheckNameAvailability</description>
            </item>
            </list>
            </summary>
            <param name="content"> Management group name availability check parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CheckNameAvailability(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent,System.Threading.CancellationToken)">
            <summary>
            Checks if the specified management group name is valid and unique
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/checkNameAvailability</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_CheckNameAvailability</description>
            </item>
            </list>
            </summary>
            <param name="content"> Management group name availability check parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.ExistsAsync(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
            <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
            <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.Exists(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
            <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
            <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.ManagementGroupData">
            <summary> A class representing the ManagementGroup data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupData.#ctor">
            <summary> Initializes a new instance of ManagementGroupData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Nullable{System.Guid},System.String,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildInfo})">
            <summary> Initializes a new instance of ManagementGroupData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="tenantId"> The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000. </param>
            <param name="displayName"> The friendly name of the management group. </param>
            <param name="details"> The details of a management group. </param>
            <param name="children"> The list of children. </param>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupData.TenantId">
            <summary> The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupData.DisplayName">
            <summary> The friendly name of the management group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupData.Details">
            <summary> The details of a management group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.ManagementGroupData.Children">
            <summary> The list of children. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupDetails">
            <summary> The details of a management group used during creation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupDetails.#ctor">
            <summary> Initializes a new instance of CreateManagementGroupDetails. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupDetails.Version">
            <summary> The version number of the object. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupDetails.UpdatedOn">
            <summary> The date and time when this object was last updated. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupDetails.UpdatedBy">
            <summary> The identity of the principal or process that updated the object. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupDetails.Parent">
            <summary> (Optional) The ID of the parent management group used during creation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.DescendantData">
            <summary> The descendant. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.DescendantData.#ctor">
            <summary> Initializes a new instance of DescendantData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.DescendantData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.String,Azure.ResourceManager.ManagementGroups.Models.DescendantParentGroupInfo)">
            <summary> Initializes a new instance of DescendantData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="displayName"> The friendly name of the management group. </param>
            <param name="parent"> The ID of the parent management group. </param>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.DescendantData.DisplayName">
            <summary> The friendly name of the management group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.DescendantData.Parent">
            <summary> The ID of the parent management group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.DescendantData.ParentId">
            <summary> The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.DescendantListResult">
            <summary> Describes the result of the request to view descendants. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.DescendantListResult.#ctor">
            <summary> Initializes a new instance of DescendantListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.DescendantListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.ManagementGroups.Models.DescendantData},System.String)">
            <summary> Initializes a new instance of DescendantListResult. </summary>
            <param name="value"> The list of descendants. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.DescendantListResult.Value">
            <summary> The list of descendants. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.DescendantListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.DescendantParentGroupInfo">
            <summary> The ID of the parent management group. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.DescendantParentGroupInfo.#ctor">
            <summary> Initializes a new instance of DescendantParentGroupInfo. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.DescendantParentGroupInfo.#ctor(Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of DescendantParentGroupInfo. </summary>
            <param name="id"> The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </param>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.DescendantParentGroupInfo.Id">
            <summary> The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildInfo">
            <summary> The child information of a management group. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildInfo.#ctor">
            <summary> Initializes a new instance of ManagementGroupChildInfo. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildInfo.#ctor(System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType},System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildInfo})">
            <summary> Initializes a new instance of ManagementGroupChildInfo. </summary>
            <param name="childType"> The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups). </param>
            <param name="id"> The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </param>
            <param name="name"> The name of the child entity. </param>
            <param name="displayName"> The friendly name of the child resource. </param>
            <param name="children"> The list of children. </param>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildInfo.ChildType">
            <summary> The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups). </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildInfo.Id">
            <summary> The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildInfo.Name">
            <summary> The name of the child entity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildInfo.DisplayName">
            <summary> The friendly name of the child resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildInfo.Children">
            <summary> The list of children. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildOptions">
            <summary> The child information of a management group used during creation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildOptions.#ctor">
            <summary> Initializes a new instance of ManagementGroupChildOptions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildOptions.ChildType">
            <summary> The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups). </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildOptions.Id">
            <summary> The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildOptions.Name">
            <summary> The name of the child entity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildOptions.DisplayName">
            <summary> The friendly name of the child resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildOptions.Children">
            <summary> The list of children. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType">
            <summary> The type of child resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType.MicrosoftManagementManagementGroups">
            <summary> Microsoft.Management/managementGroups. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType.Subscriptions">
            <summary> /subscriptions. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType.op_Equality(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType.op_Inequality(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType.op_Implicit(System.String)~Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType.Equals(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupChildType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent">
            <summary> Management group creation parameters. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent.#ctor">
            <summary> Initializes a new instance of ManagementGroupCreateOrUpdateContent. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent.Id">
            <summary> The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent.ResourceType">
            <summary> The type of the resource.  For example, Microsoft.Management/managementGroups. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent.Name">
            <summary> The name of the management group. For example, 00000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent.TenantId">
            <summary> The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent.DisplayName">
            <summary> The friendly name of the management group. If no value is passed then this  field will be set to the groupId. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent.Details">
            <summary> The details of a management group used during creation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent.Children">
            <summary> The list of children. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType">
            <summary> The ManagementGroupExpandType. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.Children">
            <summary> children. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.Path">
            <summary> path. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.Ancestors">
            <summary> ancestors. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.op_Equality(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.op_Inequality(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.op_Implicit(System.String)~Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.Equals(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo">
            <summary> The details of a management group. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo.#ctor">
            <summary> Initializes a new instance of ManagementGroupInfo. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo.#ctor(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.ResourceManager.ManagementGroups.Models.ParentManagementGroupInfo,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPathElement},System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPathElement})">
            <summary> Initializes a new instance of ManagementGroupInfo. </summary>
            <param name="version"> The version number of the object. </param>
            <param name="updatedOn"> The date and time when this object was last updated. </param>
            <param name="updatedBy"> The identity of the principal or process that updated the object. </param>
            <param name="parent"> (Optional) The ID of the parent management group. </param>
            <param name="path"> The path from the root to the current group. </param>
            <param name="managementGroupAncestors"> The ancestors of the management group. </param>
            <param name="managementGroupAncestorChain"> The ancestors of the management group displayed in reversed order, from immediate parent to the root. </param>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo.Version">
            <summary> The version number of the object. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo.UpdatedOn">
            <summary> The date and time when this object was last updated. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo.UpdatedBy">
            <summary> The identity of the principal or process that updated the object. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo.Parent">
            <summary> (Optional) The ID of the parent management group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo.Path">
            <summary> The path from the root to the current group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo.ManagementGroupAncestors">
            <summary> The ancestors of the management group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupInfo.ManagementGroupAncestorChain">
            <summary> The ancestors of the management group displayed in reversed order, from immediate parent to the root. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupListResult">
            <summary> Describes the result of the request to list management groups. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupListResult.#ctor">
            <summary> Initializes a new instance of ManagementGroupListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.ManagementGroups.ManagementGroupData},System.String)">
            <summary> Initializes a new instance of ManagementGroupListResult. </summary>
            <param name="value"> The list of management groups. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupListResult.Value">
            <summary> The list of management groups. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent">
            <summary> Management group name availability check parameters. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent.#ctor">
            <summary> Initializes a new instance of ManagementGroupNameAvailabilityContent. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent.Name">
            <summary> the name to check for availability. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent.ResourceType">
            <summary> fully qualified resource type which includes provider namespace. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult">
            <summary> Describes the result of the request to check management group name availability. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult.#ctor">
            <summary> Initializes a new instance of ManagementGroupNameAvailabilityResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult.#ctor(System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameUnavailableReason},System.String)">
            <summary> Initializes a new instance of ManagementGroupNameAvailabilityResult. </summary>
            <param name="nameAvailable"> Required. True indicates name is valid and available. False indicates the name is invalid, unavailable, or both. </param>
            <param name="reason"> Required if nameAvailable == false. Invalid indicates the name provided does not match the resource provider's naming requirements (incorrect length, unsupported characters, etc.) AlreadyExists indicates that the name is already in use and is therefore unavailable. </param>
            <param name="message"> Required if nameAvailable == false. Localized. If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that is already in use, and direct them to select a different name. </param>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult.NameAvailable">
            <summary> Required. True indicates name is valid and available. False indicates the name is invalid, unavailable, or both. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult.Reason">
            <summary> Required if nameAvailable == false. Invalid indicates the name provided does not match the resource provider's naming requirements (incorrect length, unsupported characters, etc.) AlreadyExists indicates that the name is already in use and is therefore unavailable. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult.Message">
            <summary> Required if nameAvailable == false. Localized. If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that is already in use, and direct them to select a different name. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameUnavailableReason">
            <summary> Required if nameAvailable == false. Invalid indicates the name provided does not match the resource provider's naming requirements (incorrect length, unsupported characters, etc.) AlreadyExists indicates that the name is already in use and is therefore unavailable. </summary>
        </member>
        <member name="F:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameUnavailableReason.Invalid">
            <summary> Invalid. </summary>
        </member>
        <member name="F:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameUnavailableReason.AlreadyExists">
            <summary> AlreadyExists. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupParentCreateOptions">
            <summary> (Optional) The ID of the parent management group used during creation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupParentCreateOptions.#ctor">
            <summary> Initializes a new instance of ManagementGroupParentCreateOptions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupParentCreateOptions.Id">
            <summary> The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupParentCreateOptions.Name">
            <summary> The name of the parent management group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupParentCreateOptions.DisplayName">
            <summary> The friendly name of the parent management group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPatch">
            <summary> Management group patch parameters. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPatch.#ctor">
            <summary> Initializes a new instance of ManagementGroupPatch. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPatch.DisplayName">
            <summary> The friendly name of the management group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPatch.ParentGroupId">
            <summary> (Optional) The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPathElement">
            <summary> A path element of a management group ancestors. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPathElement.#ctor">
            <summary> Initializes a new instance of ManagementGroupPathElement. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPathElement.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of ManagementGroupPathElement. </summary>
            <param name="name"> The name of the group. </param>
            <param name="displayName"> The friendly name of the group. </param>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPathElement.Name">
            <summary> The name of the group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPathElement.DisplayName">
            <summary> The friendly name of the group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.ManagementGroups.Models.ParentManagementGroupInfo">
            <summary> (Optional) The ID of the parent management group. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ParentManagementGroupInfo.#ctor">
            <summary> Initializes a new instance of ParentManagementGroupInfo. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.Models.ParentManagementGroupInfo.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of ParentManagementGroupInfo. </summary>
            <param name="id"> The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </param>
            <param name="name"> The name of the parent management group. </param>
            <param name="displayName"> The friendly name of the parent management group. </param>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ParentManagementGroupInfo.Id">
            <summary> The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ParentManagementGroupInfo.Name">
            <summary> The name of the parent management group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.ManagementGroups.Models.ParentManagementGroupInfo.DisplayName">
            <summary> The friendly name of the parent management group. </summary>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of ManagementGroupsRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.ListAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List management groups for the authenticated user.
            
            </summary>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.List(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List management groups for the authenticated user.
            
            </summary>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.GetAsync(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the details of the management group.
            
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
            <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
            <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.Get(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the details of the management group.
            
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
            <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
            <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.CreateOrUpdateAsync(System.String,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent,System.String,System.Threading.CancellationToken)">
            <summary>
            Create or update a management group.
            If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
            
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="content"> Management group creation parameters. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.CreateOrUpdate(System.String,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent,System.String,System.Threading.CancellationToken)">
            <summary>
            Create or update a management group.
            If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
            
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="content"> Management group creation parameters. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.UpdateAsync(System.String,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPatch,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a management group.
            
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="patch"> Management group patch parameters. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> or <paramref name="patch" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.Update(System.String,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupPatch,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a management group.
            
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="patch"> Management group patch parameters. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> or <paramref name="patch" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete management group.
            If a management group contains child resources, the request will fail.
            
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete management group.
            If a management group contains child resources, the request will fail.
            
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.GetDescendantsAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List all entities that descend from a management group.
            
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="top"> Number of elements to return when retrieving results. Passing this in will override $skipToken. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.GetDescendants(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List all entities that descend from a management group.
            
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="top"> Number of elements to return when retrieving results. Passing this in will override $skipToken. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.CheckNameAvailabilityAsync(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent,System.Threading.CancellationToken)">
            <summary> Checks if the specified management group name is valid and unique. </summary>
            <param name="content"> Management group name availability check parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.CheckNameAvailability(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent,System.Threading.CancellationToken)">
            <summary> Checks if the specified management group name is valid and unique. </summary>
            <param name="content"> Management group name availability check parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.ListNextPageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List management groups for the authenticated user.
            
            </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.ListNextPage(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List management groups for the authenticated user.
            
            </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.GetDescendantsNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List all entities that descend from a management group.
            
            </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="groupId"> Management Group ID. </param>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="top"> Number of elements to return when retrieving results. Passing this in will override $skipToken. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="groupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupsRestOperations.GetDescendantsNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List all entities that descend from a management group.
            
            </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="groupId"> Management Group ID. </param>
            <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
            <param name="top"> Number of elements to return when retrieving results. Passing this in will override $skipToken. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="groupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TenantResource">
            <summary>
            A class representing the operations that can be performed over a specific subscription.
            </summary>
            <summary>
            A Class representing a Tenant along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.TenantResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetTenantResource method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetManagementGroups">
            <summary> Gets a collection of ManagementGroupResources in the TenantResource. </summary>
            <returns> An object representing collection of ManagementGroupResources and their operations over a ManagementGroupResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetManagementGroupAsync(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the details of the management group.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
            <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
            <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetManagementGroup(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the details of the management group.
            
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{groupId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="groupId"> Management Group ID. </param>
            <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
            <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
            <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
            <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.#ctor(Azure.ResourceManager.ArmClient)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.TenantData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantResourceProvidersAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all resource providers for the tenant.
            Request Path: /providers
            Operation Id: Providers_ListAtTenantScope
            </summary>
            <param name="top"> [This parameter is no longer supported.] The number of results to return. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.Models.TenantResourceProvider" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantResourceProviders(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all resource providers for the tenant.
            Request Path: /providers
            Operation Id: Providers_ListAtTenantScope
            </summary>
            <param name="top"> [This parameter is no longer supported.] The number of results to return. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.Models.TenantResourceProvider" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.TenantResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetGenericResources">
            <summary> Gets a collection of GenericResources in the Tenant. </summary>
            <returns> An object representing collection of GenericResources and their operations over a GenericResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetGenericResourceAsync(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)">
            <summary>
            Gets a resource by ID.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{resourceId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Resources_GetById</description>
            </item>
            </list>
            </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetGenericResource(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)">
            <summary>
            Gets a resource by ID.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{resourceId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Resources_GetById</description>
            </item>
            </list>
            </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantPolicyDefinitions">
            <summary> Gets a collection of TenantPolicyDefinitionResources in the Tenant. </summary>
            <returns> An object representing collection of TenantPolicyDefinitionResources and their operations over a TenantPolicyDefinitionResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantPolicyDefinitionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantPolicyDefinition(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantPolicySetDefinitions">
            <summary> Gets a collection of TenantPolicySetDefinitionResources in the Tenant. </summary>
            <returns> An object representing collection of TenantPolicySetDefinitionResources and their operations over a TenantPolicySetDefinitionResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantPolicySetDefinitionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy set definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantPolicySetDefinition(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy set definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetDataPolicyManifests">
            <summary> Gets a collection of DataPolicyManifestResources in the Tenant. </summary>
            <returns> An object representing collection of DataPolicyManifestResources and their operations over a DataPolicyManifestResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetDataPolicyManifestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the data policy manifest with the given policy mode.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/dataPolicyManifests/{policyMode}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>DataPolicyManifests_GetByPolicyMode</description>
            </item>
            </list>
            </summary>
            <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyMode" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyMode" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetDataPolicyManifest(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the data policy manifest with the given policy mode.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/dataPolicyManifests/{policyMode}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>DataPolicyManifests_GetByPolicyMode</description>
            </item>
            </list>
            </summary>
            <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyMode" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyMode" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetSubscriptions">
            <summary> Gets a collection of SubscriptionResources in the Tenant. </summary>
            <returns> An object representing collection of SubscriptionResources and their operations over a SubscriptionResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetSubscriptionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets details about a specified subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_Get</description>
            </item>
            </list>
            </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetSubscription(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets details about a specified subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_Get</description>
            </item>
            </list>
            </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantResourceProvidersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all resource providers for the tenant.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_ListAtTenantScope</description>
            </item>
            </list>
            </summary>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.Models.TenantResourceProvider" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantResourceProviders(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all resource providers for the tenant.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_ListAtTenantScope</description>
            </item>
            </list>
            </summary>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.Models.TenantResourceProvider" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantResourceProviderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified resource provider at the tenant level.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/{resourceProviderNamespace}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_GetAtTenantScope</description>
            </item>
            </list>
            </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantResource.GetTenantResourceProvider(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified resource provider at the tenant level.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/{resourceProviderNamespace}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_GetAtTenantScope</description>
            </item>
            </list>
            </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ArmRestApiCollection">
            <summary>
            A class which represents the RestApis for a given azure namespace.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ArmRestApiCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ArmRestApiCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ArmRestApiCollection.#ctor(Azure.ResourceManager.ArmResource,System.String)">
            <summary> Initializes a new instance of RestApiCollection class. </summary>
            <param name="operation"> The resource representing the parent resource. </param>
            <param name="nameSpace"> The namespace for the rest apis. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ArmRestApiCollection.GetAll(System.Threading.CancellationToken)">
            <summary> Gets a list of operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.Models.ArmRestApi" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ArmRestApiCollection.GetAllAsync(System.Threading.CancellationToken)">
            <summary> Gets a list of operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.Models.ArmRestApi" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.FeatureResource">
            <summary> A Class representing a Feature along with the instance operations that can be performed on it. </summary>
            <summary>
            A Class representing a Feature along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.FeatureResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetFeatureResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> using the GetFeature method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureResource.CreateResourceIdentifier(System.String,System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.FeatureData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.FeatureResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.FeatureResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.FeatureResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the preview feature with the specified name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureResource.Get(System.Threading.CancellationToken)">
            <summary>
            Gets the preview feature with the specified name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureResource.RegisterAsync(System.Threading.CancellationToken)">
            <summary>
            Registers the preview feature for the subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}/register</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Register</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureResource.Register(System.Threading.CancellationToken)">
            <summary>
            Registers the preview feature for the subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}/register</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Register</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureResource.UnregisterAsync(System.Threading.CancellationToken)">
            <summary>
            Unregisters the preview feature for the subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}/unregister</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Unregister</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureResource.Unregister(System.Threading.CancellationToken)">
            <summary>
            Unregisters the preview feature for the subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}/unregister</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Unregister</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.ResourceManager.Resources.GenericResource">
            <summary> A Class representing a GenericResource along with the instance operations that can be performed on it. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.GenericResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.GenericResourceData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.GenericResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.GenericResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.GetAsync(System.Threading.CancellationToken)">
            RequestPath: /{resourceId}
            ContextualPath: /{resourceId}
            OperationId: Resources_GetById
            <summary> Gets a resource by ID. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.Get(System.Threading.CancellationToken)">
            RequestPath: /{resourceId}
            ContextualPath: /{resourceId}
            OperationId: Resources_GetById
            <summary> Gets a resource by ID. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            RequestPath: /{resourceId}
            ContextualPath: /{resourceId}
            OperationId: Resources_DeleteById
            <summary> Deletes a resource by ID. </summary>
            <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            RequestPath: /{resourceId}
            ContextualPath: /{resourceId}
            OperationId: Resources_DeleteById
            <summary> Deletes a resource by ID. </summary>
            <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.AddTagAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Add a tag to the current resource. </summary>
            <param name="key"> The key for the tag. </param>
            <param name="value"> The value for the tag. </param>
            <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="P:System.Threading.CancellationToken.None" />. </param>
            <returns> The updated resource with the tag added. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.AddTag(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Add a tag to the current resource. </summary>
            <param name="key"> The key for the tag. </param>
            <param name="value"> The value for the tag. </param>
            <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="P:System.Threading.CancellationToken.None" />. </param>
            <returns> The updated resource with the tag added. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.SetTagsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary> Replace the tags on the resource with the given set. </summary>
            <param name="tags"> The set of tags to use as replacement. </param>
            <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="P:System.Threading.CancellationToken.None" />. </param>
            <returns> The updated resource with the tags replaced. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.SetTags(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary> Replace the tags on the resource with the given set. </summary>
            <param name="tags"> The set of tags to use as replacement. </param>
            <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="P:System.Threading.CancellationToken.None" />. </param>
            <returns> The updated resource with the tags replaced. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.RemoveTagAsync(System.String,System.Threading.CancellationToken)">
            <summary> Removes a tag by key from the resource. </summary>
            <param name="key"> The key of the tag to remove. </param>
            <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="P:System.Threading.CancellationToken.None" />. </param>
            <returns> The updated resource with the tag removed. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.RemoveTag(System.String,System.Threading.CancellationToken)">
            <summary> Removes a tag by key from the resource. </summary>
            <param name="key"> The key of the tag to remove. </param>
            <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="P:System.Threading.CancellationToken.None" />. </param>
            <returns> The updated resource with the tag removed. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.GenericResourceData,System.Threading.CancellationToken)">
            RequestPath: /{resourceId}
            ContextualPath: /{resourceId}
            OperationId: Resources_UpdateById
            <summary> Updates a resource by ID. </summary>
            <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> Update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResource.Update(Azure.WaitUntil,Azure.ResourceManager.Resources.GenericResourceData,System.Threading.CancellationToken)">
            RequestPath: /{resourceId}
            ContextualPath: /{resourceId}
            OperationId: Resources_UpdateById
            <summary> Updates a resource by ID. </summary>
            <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> Update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.GenericResourceCollection">
            <summary> A class representing collection of GenericResource and their operations over its parent. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResourceCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.GenericResourceCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResourceCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.GenericResourceCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResourceCollection.CreateOrUpdate(Azure.WaitUntil,Azure.Core.ResourceIdentifier,Azure.ResourceManager.Resources.GenericResourceData,System.Threading.CancellationToken)">
            RequestPath: /{resourceId}
            ContextualPath: /
            OperationId: Resources_CreateOrUpdateById
            <summary> Create a resource by ID. </summary>
            <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="data"> Create or update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResourceCollection.CreateOrUpdateAsync(Azure.WaitUntil,Azure.Core.ResourceIdentifier,Azure.ResourceManager.Resources.GenericResourceData,System.Threading.CancellationToken)">
            RequestPath: /{resourceId}
            ContextualPath: /
            OperationId: Resources_CreateOrUpdateById
            <summary> Create a resource by ID. </summary>
            <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="data"> Create or update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" />, or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResourceCollection.Get(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)">
            RequestPath: /{resourceId}
            ContextualPath: /
            OperationId: Resources_GetById
            <summary> Gets a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResourceCollection.GetAsync(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)">
            RequestPath: /{resourceId}
            ContextualPath: /
            OperationId: Resources_GetById
            <summary> Gets a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResourceCollection.Exists(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)">
            <summary> Tries to get details for this resource from the service. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResourceCollection.ExistsAsync(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)">
            <summary> Tries to get details for this resource from the service. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.GenericResourceData">
            <summary> A class representing the GenericResource data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResourceData.#ctor(Azure.Core.AzureLocation)">
            <summary> Initializes a new instance of GenericResourceData. </summary>
            <param name="location"> The location. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.GenericResourceData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,Azure.ResourceManager.Resources.Models.ExtendedLocation,Azure.ResourceManager.Models.ArmPlan,System.BinaryData,System.String,System.String,Azure.ResourceManager.Resources.Models.ResourcesSku,Azure.ResourceManager.Models.ManagedServiceIdentity,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String)">
            <summary> Initializes a new instance of GenericResourceData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="tags"> The tags. </param>
            <param name="location"> The location. </param>
            <param name="extendedLocation"> Resource extended location. </param>
            <param name="plan"> The plan of the resource. </param>
            <param name="properties"> The resource properties. </param>
            <param name="kind"> The kind of the resource. </param>
            <param name="managedBy"> ID of the resource that manages this resource. </param>
            <param name="sku"> The SKU of the resource. </param>
            <param name="identity"> The identity of the resource. </param>
            <param name="createdOn"> The created time of the resource. This is only present if requested via the $expand query parameter. </param>
            <param name="changedOn"> The changed time of the resource. This is only present if requested via the $expand query parameter. </param>
            <param name="provisioningState"> The provisioning state of the resource. This is only present if requested via the $expand query parameter. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResourceData.Plan">
            <summary> The plan of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResourceData.Properties">
            <summary>
            The resource properties.
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para>
            <para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para>
            <para>
            Examples:
            <list type="bullet">
            <item>
            <term>BinaryData.FromObjectAsJson("foo")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromString("\"foo\"")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            <item>
            <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResourceData.Kind">
            <summary> The kind of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResourceData.ManagedBy">
            <summary> ID of the resource that manages this resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResourceData.Sku">
            <summary> The SKU of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResourceData.Identity">
            <summary> The identity of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResourceData.CreatedOn">
            <summary> The created time of the resource. This is only present if requested via the $expand query parameter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResourceData.ChangedOn">
            <summary> The changed time of the resource. This is only present if requested via the $expand query parameter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.GenericResourceData.ProvisioningState">
            <summary> The provisioning state of the resource. This is only present if requested via the $expand query parameter. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ArmRestApi">
            <summary> Describes the properties of an Operation value. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmRestApi.#ctor">
            <summary> Initializes a new instance of RestApi for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmRestApi.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of RestApi. </summary>
            <param name="origin"> The origin of the operation. </param>
            <param name="name"> The name of the operation. </param>
            <param name="operation"> The display name of the operation. </param>
            <param name="resource"> The display name of the resource the operation applies to. </param>
            <param name="description"> The description of the operation. </param>
            <param name="provider"> The resource provider for the operation. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmRestApi.Origin">
            <summary> The origin of the operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmRestApi.Name">
            <summary> The name of the operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmRestApi.Operation">
            <summary> The display name of the operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmRestApi.Resource">
            <summary> The display name of the resource the operation applies to. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmRestApi.Description">
            <summary> The description of the operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmRestApi.Provider">
            <summary> The resource provider for the operation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ArmRestApiListResult">
            <summary> The List Operation operation response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmRestApiListResult.#ctor">
            <summary> Initializes a new instance of RestApiListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmRestApiListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ArmRestApi})">
            <summary> Initializes a new instance of RestApiListResult. </summary>
            <param name="value"> The list of operations. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmRestApiListResult.Value">
            <summary> The list of operations. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.LocationExpanded">
            <summary> Location information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationExpanded.op_Implicit(Azure.ResourceManager.Resources.Models.LocationExpanded)~Azure.Core.AzureLocation">
            <summary>
            Convert LocationExpanded into a Location object.
            </summary>
            <param name="location"> The location to convert. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationExpanded.#ctor(System.String,System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.LocationType},System.String,System.String,Azure.ResourceManager.Resources.Models.LocationMetadata)">
            <summary> Initializes a new instance of LocationExpanded. </summary>
            <param name="id"> The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus. </param>
            <param name="subscriptionId"> The subscription ID. </param>
            <param name="name"> The location name. </param>
            <param name="locationType"> The location type. </param>
            <param name="displayName"> The display name of the location. </param>
            <param name="regionalDisplayName"> The display name of the location and its region. </param>
            <param name="metadata"> Metadata of the location, such as lat/long, paired region, and others. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationExpanded.#ctor">
            <summary> Initializes a new instance of LocationExpanded. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationExpanded.Id">
            <summary> The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationExpanded.SubscriptionId">
            <summary> The subscription ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationExpanded.Name">
            <summary> The location name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationExpanded.LocationType">
            <summary> The location type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationExpanded.DisplayName">
            <summary> The display name of the location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationExpanded.RegionalDisplayName">
            <summary> The display name of the location and its region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationExpanded.Metadata">
            <summary> Metadata of the location, such as lat/long, paired region, and others. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.LocationMetadata">
            <summary> Location metadata information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationMetadata.#ctor">
            <summary> Initializes a new instance of LocationMetadata. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationMetadata.#ctor(System.Nullable{Azure.ResourceManager.Resources.Models.RegionType},System.Nullable{Azure.ResourceManager.Resources.Models.RegionCategory},System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.PairedRegion},System.String)">
            <summary> Initializes a new instance of LocationMetadata. </summary>
            <param name="regionType"> The type of the region. </param>
            <param name="regionCategory"> The category of the region. </param>
            <param name="geographyGroup"> The geography group of the location. </param>
            <param name="longitude"> The longitude of the location. </param>
            <param name="latitude"> The latitude of the location. </param>
            <param name="physicalLocation"> The physical location of the Azure location. </param>
            <param name="pairedRegions"> The regions paired to this region. </param>
            <param name="homeLocation"> The home location of an edge zone. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.RegionType">
            <summary> The type of the region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.RegionCategory">
            <summary> The category of the region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.GeographyGroup">
            <summary> The geography group of the location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.Longitude">
            <summary> The longitude of the location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.Latitude">
            <summary> The latitude of the location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.PhysicalLocation">
            <summary> The physical location of the Azure location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.PairedRegions">
            <summary> The regions paired to this region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.HomeLocation">
            <summary> The home location of an edge zone. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SubResource">
            <summary>
            A class representing a sub-resource that contains only the read-only ID.
            </summary>
            <summary> Sub-resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubResource.#ctor">
            <summary>
            Initializes an empty instance of <see cref="T:Azure.ResourceManager.Resources.Models.SubResource" /> for mocking.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubResource.#ctor(Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.SubResource" />. </summary>
            <param name="id"> ARM resource Id. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubResource.Id">
            <summary>
            Gets the ARM resource identifier.
            </summary>
            <value></value>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Tag">
            <summary> A dictionary of name and value pairs. </summary>
            <summary> A dictionary of name and value pairs. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Tag.TagValues">
            <summary> Dictionary of &lt;string&gt;. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Tag.#ctor">
            <summary> Initializes a new instance of Tag. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Tag.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> Initializes a new instance of Tag. </summary>
            <param name="tagValues"> Dictionary of &lt;string&gt;. </param>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.WritableSubResource">
            <summary>
            A class representing a sub-resource that contains only the ID.
            </summary>
            <summary>
            A class representing a sub-resource that contains only the ID.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.WritableSubResource.#ctor">
            <summary>
            Initializes an empty instance of <see cref="T:Azure.ResourceManager.Resources.Models.WritableSubResource" /> for mocking.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.WritableSubResource.#ctor(Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.WritableSubResource" />. </summary>
            <param name="id"> ARM resource Id. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WritableSubResource.Id">
            <summary>
            Gets or sets the ARM resource identifier.
            </summary>
            <value></value>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.WritableSubResource.Azure#Core#IUtf8JsonSerializable#Write(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Serialize the input WritableSubResource object.
            </summary>
            <param name="writer"> Input Json writer. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.WritableSubResource.DeserializeWritableSubResource(System.Text.Json.JsonElement)">
            <summary>
            Deserialize the input JSON element to a WritableSubResource object.
            </summary>
            <param name="element">The JSON element to be deserialized.</param>
            <returns>Deserialized WritableSubResource object.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ApiProfile">
            <summary> The ApiProfile. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApiProfile.#ctor">
            <summary> Initializes a new instance of ApiProfile. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApiProfile.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of ApiProfile. </summary>
            <param name="profileVersion"> The profile version. </param>
            <param name="apiVersion"> The API version. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApiProfile.ProfileVersion">
            <summary> The profile version. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApiProfile.ApiVersion">
            <summary> The API version. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ArmPolicyParameter">
            <summary> The definition of a parameter that can be provided to the policy. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameter.#ctor">
            <summary> Initializes a new instance of ArmPolicyParameter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameter.#ctor(System.Nullable{Azure.ResourceManager.Resources.Models.ArmPolicyParameterType},System.Collections.Generic.IList{System.BinaryData},System.BinaryData,Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata)">
            <summary> Initializes a new instance of ArmPolicyParameter. </summary>
            <param name="parameterType"> The data type of the parameter. </param>
            <param name="allowedValues"> The allowed values for the parameter. </param>
            <param name="defaultValue"> The default value for the parameter if no value is provided. </param>
            <param name="metadata"> General metadata for the parameter. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameter.ParameterType">
            <summary> The data type of the parameter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameter.AllowedValues">
            <summary>
            The allowed values for the parameter.
            <para>
            To assign an object to the element of this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para>
            <para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para>
            <para>
            Examples:
            <list type="bullet">
            <item>
            <term>BinaryData.FromObjectAsJson("foo")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromString("\"foo\"")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            <item>
            <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameter.DefaultValue">
            <summary>
            The default value for the parameter if no value is provided.
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para>
            <para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para>
            <para>
            Examples:
            <list type="bullet">
            <item>
            <term>BinaryData.FromObjectAsJson("foo")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromString("\"foo\"")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            <item>
            <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameter.Metadata">
            <summary> General metadata for the parameter. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType">
            <summary> The data type of the parameter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.String">
            <summary> String. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.Array">
            <summary> Array. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.Object">
            <summary> Object. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.Boolean">
            <summary> Boolean. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.Integer">
            <summary> Integer. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.Float">
            <summary> Float. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.DateTime">
            <summary> DateTime. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.op_Equality(Azure.ResourceManager.Resources.Models.ArmPolicyParameterType,Azure.ResourceManager.Resources.Models.ArmPolicyParameterType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.op_Inequality(Azure.ResourceManager.Resources.Models.ArmPolicyParameterType,Azure.ResourceManager.Resources.Models.ArmPolicyParameterType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ArmPolicyParameterType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.Equals(Azure.ResourceManager.Resources.Models.ArmPolicyParameterType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameterType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ArmPolicyParameterValue">
            <summary> The value of a parameter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameterValue.#ctor">
            <summary> Initializes a new instance of ArmPolicyParameterValue. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ArmPolicyParameterValue.#ctor(System.BinaryData)">
            <summary> Initializes a new instance of ArmPolicyParameterValue. </summary>
            <param name="value"> The value of the parameter. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ArmPolicyParameterValue.Value">
            <summary>
            The value of the parameter.
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para>
            <para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para>
            <para>
            Examples:
            <list type="bullet">
            <item>
            <term>BinaryData.FromObjectAsJson("foo")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromString("\"foo\"")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            <item>
            <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.AzureRoleDefinition">
            <summary> Role definition properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AzureRoleDefinition.#ctor">
            <summary> Initializes a new instance of AzureRoleDefinition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AzureRoleDefinition.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.Permission},System.Collections.Generic.IReadOnlyList{System.String})">
            <summary> Initializes a new instance of AzureRoleDefinition. </summary>
            <param name="id"> The role definition ID. </param>
            <param name="name"> The role definition name. </param>
            <param name="isServiceRole"> If this is a service role. </param>
            <param name="permissions"> Role definition permissions. </param>
            <param name="scopes"> Role definition assignable scopes. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureRoleDefinition.Id">
            <summary> The role definition ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureRoleDefinition.Name">
            <summary> The role definition name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureRoleDefinition.IsServiceRole">
            <summary> If this is a service role. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureRoleDefinition.Permissions">
            <summary> Role definition permissions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureRoleDefinition.Scopes">
            <summary> Role definition assignable scopes. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DataManifestCustomResourceFunctionDefinition">
            <summary> The custom resource function definition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DataManifestCustomResourceFunctionDefinition.#ctor">
            <summary> Initializes a new instance of DataManifestCustomResourceFunctionDefinition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DataManifestCustomResourceFunctionDefinition.#ctor(System.String,System.Nullable{Azure.Core.ResourceType},System.Collections.Generic.IReadOnlyList{System.String},System.Nullable{System.Boolean})">
            <summary> Initializes a new instance of DataManifestCustomResourceFunctionDefinition. </summary>
            <param name="name"> The function name as it will appear in the policy rule. eg - 'vault'. </param>
            <param name="fullyQualifiedResourceType"> The fully qualified control plane resource type that this function represents. eg - 'Microsoft.KeyVault/vaults'. </param>
            <param name="defaultProperties"> The top-level properties that can be selected on the function's output. eg - [ "name", "location" ] if vault().name and vault().location are supported. </param>
            <param name="allowCustomProperties"> A value indicating whether the custom properties within the property bag are allowed. Needs api-version to be specified in the policy rule eg - vault('2019-06-01'). </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DataManifestCustomResourceFunctionDefinition.Name">
            <summary> The function name as it will appear in the policy rule. eg - 'vault'. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DataManifestCustomResourceFunctionDefinition.FullyQualifiedResourceType">
            <summary> The fully qualified control plane resource type that this function represents. eg - 'Microsoft.KeyVault/vaults'. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DataManifestCustomResourceFunctionDefinition.DefaultProperties">
            <summary> The top-level properties that can be selected on the function's output. eg - [ "name", "location" ] if vault().name and vault().location are supported. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DataManifestCustomResourceFunctionDefinition.AllowCustomProperties">
            <summary> A value indicating whether the custom properties within the property bag are allowed. Needs api-version to be specified in the policy rule eg - vault('2019-06-01'). </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DataPolicyManifestEffect">
            <summary> The data effect definition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DataPolicyManifestEffect.#ctor">
            <summary> Initializes a new instance of DataPolicyManifestEffect. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DataPolicyManifestEffect.#ctor(System.String,System.BinaryData)">
            <summary> Initializes a new instance of DataPolicyManifestEffect. </summary>
            <param name="name"> The data effect name. </param>
            <param name="detailsSchema"> The data effect details schema. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DataPolicyManifestEffect.Name">
            <summary> The data effect name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DataPolicyManifestEffect.DetailsSchema">
            <summary>
            The data effect details schema.
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para>
            <para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para>
            <para>
            Examples:
            <list type="bullet">
            <item>
            <term>BinaryData.FromObjectAsJson("foo")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromString("\"foo\"")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            <item>
            <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DataPolicyManifestListResult">
            <summary> List of data policy manifests. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DataPolicyManifestListResult.#ctor">
            <summary> Initializes a new instance of DataPolicyManifestListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DataPolicyManifestListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.DataPolicyManifestData},System.String)">
            <summary> Initializes a new instance of DataPolicyManifestListResult. </summary>
            <param name="value"> An array of data policy manifests. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DataPolicyManifestListResult.Value">
            <summary> An array of data policy manifests. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DataPolicyManifestListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.EnforcementMode">
            <summary> The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.EnforcementMode" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.EnforcementMode.Enforced">
            <summary> The policy effect is enforced during resource creation or update. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.EnforcementMode.DoNotEnforce">
            <summary> The policy effect is not enforced during resource creation or update. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.op_Equality(Azure.ResourceManager.Resources.Models.EnforcementMode,Azure.ResourceManager.Resources.Models.EnforcementMode)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.EnforcementMode" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.op_Inequality(Azure.ResourceManager.Resources.Models.EnforcementMode,Azure.ResourceManager.Resources.Models.EnforcementMode)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.EnforcementMode" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.EnforcementMode">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.EnforcementMode" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.Equals(Azure.ResourceManager.Resources.Models.EnforcementMode)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ExportTemplate">
            <summary> Export resource group template request parameters. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExportTemplate.#ctor">
            <summary> Initializes a new instance of ExportTemplate. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ExportTemplate.Resources">
            <summary> The IDs of the resources to filter the export by. To export all resources, supply an array with single entry '*'. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ExportTemplate.Options">
            <summary> The export template options. A CSV-formatted list containing zero or more of the following: 'IncludeParameterDefaultValue', 'IncludeComments', 'SkipResourceNameParameterization', 'SkipAllParameterization'. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ExtendedLocation">
            <summary> Resource extended location. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExtendedLocation.#ctor">
            <summary> Initializes a new instance of ExtendedLocation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExtendedLocation.#ctor(System.Nullable{Azure.ResourceManager.Resources.Models.ExtendedLocationType},System.String)">
            <summary> Initializes a new instance of ExtendedLocation. </summary>
            <param name="extendedLocationType"> The extended location type. </param>
            <param name="name"> The extended location name. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ExtendedLocation.ExtendedLocationType">
            <summary> The extended location type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ExtendedLocation.Name">
            <summary> The extended location name. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ExtendedLocationType">
            <summary> The extended location type. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExtendedLocationType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.ExtendedLocationType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ExtendedLocationType.EdgeZone">
            <summary> EdgeZone. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExtendedLocationType.op_Equality(Azure.ResourceManager.Resources.Models.ExtendedLocationType,Azure.ResourceManager.Resources.Models.ExtendedLocationType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ExtendedLocationType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExtendedLocationType.op_Inequality(Azure.ResourceManager.Resources.Models.ExtendedLocationType,Azure.ResourceManager.Resources.Models.ExtendedLocationType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ExtendedLocationType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExtendedLocationType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ExtendedLocationType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ExtendedLocationType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExtendedLocationType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExtendedLocationType.Equals(Azure.ResourceManager.Resources.Models.ExtendedLocationType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExtendedLocationType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExtendedLocationType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.FeatureOperationsListResult">
            <summary> List of previewed features. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.FeatureOperationsListResult.#ctor">
            <summary> Initializes a new instance of FeatureOperationsListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.FeatureOperationsListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.FeatureData},System.String)">
            <summary> Initializes a new instance of FeatureOperationsListResult. </summary>
            <param name="value"> The array of features. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.FeatureOperationsListResult.Value">
            <summary> The array of features. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.FeatureOperationsListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.FeatureProperties">
            <summary> Information about feature. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.FeatureProperties.#ctor">
            <summary> Initializes a new instance of FeatureProperties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.FeatureProperties.#ctor(System.String)">
            <summary> Initializes a new instance of FeatureProperties. </summary>
            <param name="state"> The registration state of the feature for the subscription. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.FeatureProperties.State">
            <summary> The registration state of the feature for the subscription. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.LocationListResult">
            <summary> Location list operation response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationListResult.#ctor">
            <summary> Initializes a new instance of LocationListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.LocationExpanded})">
            <summary> Initializes a new instance of LocationListResult. </summary>
            <param name="value"> An array of locations. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationListResult.Value">
            <summary> An array of locations. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.LocationType">
            <summary> The location type. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.LocationType.Region">
            <summary> Region. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.LocationType.EdgeZone">
            <summary> EdgeZone. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ManagedByTenant">
            <summary> Information about a tenant managing the subscription. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedByTenant.#ctor">
            <summary> Initializes a new instance of ManagedByTenant. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedByTenant.#ctor(System.Nullable{System.Guid})">
            <summary> Initializes a new instance of ManagedByTenant. </summary>
            <param name="tenantId"> The tenant ID of the managing tenant. This is a GUID. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagedByTenant.TenantId">
            <summary> The tenant ID of the managing tenant. This is a GUID. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ManagementLockLevel">
            <summary> The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockLevel.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.ManagementLockLevel" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockLevel.NotSpecified">
            <summary> NotSpecified. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockLevel.CanNotDelete">
            <summary> CanNotDelete. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockLevel.ReadOnly">
            <summary> ReadOnly. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockLevel.op_Equality(Azure.ResourceManager.Resources.Models.ManagementLockLevel,Azure.ResourceManager.Resources.Models.ManagementLockLevel)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ManagementLockLevel" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockLevel.op_Inequality(Azure.ResourceManager.Resources.Models.ManagementLockLevel,Azure.ResourceManager.Resources.Models.ManagementLockLevel)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ManagementLockLevel" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockLevel.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ManagementLockLevel">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ManagementLockLevel" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockLevel.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockLevel.Equals(Azure.ResourceManager.Resources.Models.ManagementLockLevel)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockLevel.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockLevel.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ManagementLockListResult">
            <summary> The list of locks. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockListResult.#ctor">
            <summary> Initializes a new instance of ManagementLockListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.ManagementLockData},System.String)">
            <summary> Initializes a new instance of ManagementLockListResult. </summary>
            <param name="value"> The list of locks. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockListResult.Value">
            <summary> The list of locks. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ManagementLockOwner">
            <summary> Lock owner properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockOwner.#ctor">
            <summary> Initializes a new instance of ManagementLockOwner. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockOwner.#ctor(System.String)">
            <summary> Initializes a new instance of ManagementLockOwner. </summary>
            <param name="applicationId"> The application ID of the lock owner. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockOwner.ApplicationId">
            <summary> The application ID of the lock owner. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.NonComplianceMessage">
            <summary> A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.NonComplianceMessage.#ctor(System.String)">
            <summary> Initializes a new instance of NonComplianceMessage. </summary>
            <param name="message"> A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="message" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.NonComplianceMessage.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of NonComplianceMessage. </summary>
            <param name="message"> A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results. </param>
            <param name="policyDefinitionReferenceId"> The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.NonComplianceMessage.Message">
            <summary> A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.NonComplianceMessage.PolicyDefinitionReferenceId">
            <summary> The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PairedRegion">
            <summary> Information regarding paired region. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PairedRegion.#ctor">
            <summary> Initializes a new instance of PairedRegion. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PairedRegion.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of PairedRegion. </summary>
            <param name="name"> The name of the paired region. </param>
            <param name="id"> The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus. </param>
            <param name="subscriptionId"> The subscription ID. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PairedRegion.Name">
            <summary> The name of the paired region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PairedRegion.Id">
            <summary> The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PairedRegion.SubscriptionId">
            <summary> The subscription ID. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata">
            <summary> General metadata for the parameter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.#ctor">
            <summary> Initializes a new instance of ParameterDefinitionsValueMetadata. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.#ctor(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.BinaryData})">
            <summary> Initializes a new instance of ParameterDefinitionsValueMetadata. </summary>
            <param name="displayName"> The display name for the parameter. </param>
            <param name="description"> The description of the parameter. </param>
            <param name="strongType"> Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from. </param>
            <param name="assignPermissions"> Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope. </param>
            <param name="additionalProperties"> Additional Properties. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.DisplayName">
            <summary> The display name for the parameter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.Description">
            <summary> The description of the parameter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.StrongType">
            <summary> Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.AssignPermissions">
            <summary> Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.AdditionalProperties">
            <summary>
            Additional Properties
            <para>
            To assign an object to the value of this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para>
            <para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para>
            <para>
            Examples:
            <list type="bullet">
            <item>
            <term>BinaryData.FromObjectAsJson("foo")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromString("\"foo\"")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            <item>
            <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Permission">
            <summary> Role definition permissions. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Permission.#ctor">
            <summary> Initializes a new instance of Permission. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Permission.#ctor(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.String})">
            <summary> Initializes a new instance of Permission. </summary>
            <param name="allowedActions"> Allowed actions. </param>
            <param name="deniedActions"> Denied actions. </param>
            <param name="allowedDataActions"> Allowed Data actions. </param>
            <param name="deniedDataActions"> Denied Data actions. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Permission.AllowedActions">
            <summary> Allowed actions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Permission.DeniedActions">
            <summary> Denied actions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Permission.AllowedDataActions">
            <summary> Allowed Data actions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Permission.DeniedDataActions">
            <summary> Denied Data actions. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyAssignmentListResult">
            <summary> List of policy assignments. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyAssignmentListResult.#ctor">
            <summary> Initializes a new instance of PolicyAssignmentListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyAssignmentListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.PolicyAssignmentData},System.String)">
            <summary> Initializes a new instance of PolicyAssignmentListResult. </summary>
            <param name="value"> An array of policy assignments. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignmentListResult.Value">
            <summary> An array of policy assignments. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignmentListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup">
            <summary> The policy definition group. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.#ctor(System.String)">
            <summary> Initializes a new instance of PolicyDefinitionGroup. </summary>
            <param name="name"> The name of the group. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of PolicyDefinitionGroup. </summary>
            <param name="name"> The name of the group. </param>
            <param name="displayName"> The group's display name. </param>
            <param name="category"> The group's category. </param>
            <param name="description"> The group's description. </param>
            <param name="additionalMetadataId"> A resource ID of a resource that contains additional metadata about the group. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.Name">
            <summary> The name of the group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.DisplayName">
            <summary> The group's display name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.Category">
            <summary> The group's category. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.Description">
            <summary> The group's description. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.AdditionalMetadataId">
            <summary> A resource ID of a resource that contains additional metadata about the group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyDefinitionListResult">
            <summary> List of policy definitions. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionListResult.#ctor">
            <summary> Initializes a new instance of PolicyDefinitionListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.PolicyDefinitionData},System.String)">
            <summary> Initializes a new instance of PolicyDefinitionListResult. </summary>
            <param name="value"> An array of policy definitions. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionListResult.Value">
            <summary> An array of policy definitions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference">
            <summary> The policy definition reference. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.#ctor(System.String)">
            <summary> Initializes a new instance of PolicyDefinitionReference. </summary>
            <param name="policyDefinitionId"> The ID of the policy definition or policy set definition. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Azure.ResourceManager.Resources.Models.ArmPolicyParameterValue},System.String,System.Collections.Generic.IList{System.String})">
            <summary> Initializes a new instance of PolicyDefinitionReference. </summary>
            <param name="policyDefinitionId"> The ID of the policy definition or policy set definition. </param>
            <param name="parameters"> The parameter values for the referenced policy rule. The keys are the parameter names. </param>
            <param name="policyDefinitionReferenceId"> A unique id (within the policy set definition) for this policy definition reference. </param>
            <param name="groupNames"> The name of the groups that this policy definition reference belongs to. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.PolicyDefinitionId">
            <summary> The ID of the policy definition or policy set definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.Parameters">
            <summary> The parameter values for the referenced policy rule. The keys are the parameter names. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.PolicyDefinitionReferenceId">
            <summary> A unique id (within the policy set definition) for this policy definition reference. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.GroupNames">
            <summary> The name of the groups that this policy definition reference belongs to. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicySetDefinitionListResult">
            <summary> List of policy set definitions. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicySetDefinitionListResult.#ctor">
            <summary> Initializes a new instance of PolicySetDefinitionListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicySetDefinitionListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.PolicySetDefinitionData},System.String)">
            <summary> Initializes a new instance of PolicySetDefinitionListResult. </summary>
            <param name="value"> An array of policy set definitions. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinitionListResult.Value">
            <summary> An array of policy set definitions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinitionListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyType">
            <summary> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.PolicyType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyType.NotSpecified">
            <summary> NotSpecified. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyType.BuiltIn">
            <summary> BuiltIn. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyType.Custom">
            <summary> Custom. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyType.Static">
            <summary> Static. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.op_Equality(Azure.ResourceManager.Resources.Models.PolicyType,Azure.ResourceManager.Resources.Models.PolicyType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.PolicyType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.op_Inequality(Azure.ResourceManager.Resources.Models.PolicyType,Azure.ResourceManager.Resources.Models.PolicyType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.PolicyType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.PolicyType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.PolicyType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.Equals(Azure.ResourceManager.Resources.Models.PolicyType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PredefinedTag">
            <summary> Tag details. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PredefinedTag.#ctor">
            <summary> Initializes a new instance of PredefinedTag. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PredefinedTag.#ctor(System.String,System.String,Azure.ResourceManager.Resources.Models.PredefinedTagCount,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.PredefinedTagValue})">
            <summary> Initializes a new instance of PredefinedTag. </summary>
            <param name="id"> The tag name ID. </param>
            <param name="tagName"> The tag name. </param>
            <param name="count"> The total number of resources that use the resource tag. When a tag is initially created and has no associated resources, the value is 0. </param>
            <param name="values"> The list of tag values. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTag.Id">
            <summary> The tag name ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTag.TagName">
            <summary> The tag name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTag.Count">
            <summary> The total number of resources that use the resource tag. When a tag is initially created and has no associated resources, the value is 0. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTag.Values">
            <summary> The list of tag values. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PredefinedTagCount">
            <summary> Tag count. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PredefinedTagCount.#ctor">
            <summary> Initializes a new instance of PredefinedTagCount. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PredefinedTagCount.#ctor(System.String,System.Nullable{System.Int32})">
            <summary> Initializes a new instance of PredefinedTagCount. </summary>
            <param name="predefinedTagCountType"> Type of count. </param>
            <param name="value"> Value of count. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTagCount.PredefinedTagCountType">
            <summary> Type of count. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTagCount.Value">
            <summary> Value of count. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PredefinedTagsListResult">
            <summary> List of subscription tags. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PredefinedTagsListResult.#ctor">
            <summary> Initializes a new instance of PredefinedTagsListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PredefinedTagsListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.PredefinedTag},System.String)">
            <summary> Initializes a new instance of PredefinedTagsListResult. </summary>
            <param name="value"> An array of tags. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTagsListResult.Value">
            <summary> An array of tags. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTagsListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PredefinedTagValue">
            <summary> Tag information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PredefinedTagValue.#ctor">
            <summary> Initializes a new instance of PredefinedTagValue. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PredefinedTagValue.#ctor(System.String,System.String,Azure.ResourceManager.Resources.Models.PredefinedTagCount)">
            <summary> Initializes a new instance of PredefinedTagValue. </summary>
            <param name="id"> The tag value ID. </param>
            <param name="tagValue"> The tag value. </param>
            <param name="count"> The tag value count. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTagValue.Id">
            <summary> The tag value ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTagValue.TagValue">
            <summary> The tag value. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PredefinedTagValue.Count">
            <summary> The tag value count. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState">
            <summary> The provider authorization consent state. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.NotSpecified">
            <summary> NotSpecified. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.Required">
            <summary> Required. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.NotRequired">
            <summary> NotRequired. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.Consented">
            <summary> Consented. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.op_Equality(Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState,Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.op_Inequality(Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState,Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.Equals(Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProviderConsentDefinition">
            <summary> The provider consent. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderConsentDefinition.#ctor">
            <summary> Initializes a new instance of ProviderConsentDefinition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderConsentDefinition.ConsentToAuthorization">
            <summary> A value indicating whether authorization is consented or not. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProviderExtendedLocation">
            <summary> The provider extended location. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderExtendedLocation.#ctor">
            <summary> Initializes a new instance of ProviderExtendedLocation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderExtendedLocation.#ctor(System.Nullable{Azure.Core.AzureLocation},System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary> Initializes a new instance of ProviderExtendedLocation. </summary>
            <param name="location"> The azure location. </param>
            <param name="providerExtendedLocationType"> The extended location type. </param>
            <param name="extendedLocations"> The extended locations for the azure location. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderExtendedLocation.Location">
            <summary> The azure location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderExtendedLocation.ProviderExtendedLocationType">
            <summary> The extended location type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderExtendedLocation.ExtendedLocations">
            <summary> The extended locations for the azure location. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProviderPermission">
            <summary> The provider permission. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderPermission.#ctor">
            <summary> Initializes a new instance of ProviderPermission. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderPermission.#ctor(System.String,Azure.ResourceManager.Resources.Models.AzureRoleDefinition,Azure.ResourceManager.Resources.Models.AzureRoleDefinition,System.Nullable{Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState})">
            <summary> Initializes a new instance of ProviderPermission. </summary>
            <param name="applicationId"> The application id. </param>
            <param name="roleDefinition"> Role definition properties. </param>
            <param name="managedByRoleDefinition"> Role definition properties. </param>
            <param name="providerAuthorizationConsentState"> The provider authorization consent state. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderPermission.ApplicationId">
            <summary> The application id. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderPermission.RoleDefinition">
            <summary> Role definition properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderPermission.ManagedByRoleDefinition">
            <summary> Role definition properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderPermission.ProviderAuthorizationConsentState">
            <summary> The provider authorization consent state. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProviderPermissionListResult">
            <summary> List of provider permissions. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderPermissionListResult.#ctor">
            <summary> Initializes a new instance of ProviderPermissionListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderPermissionListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ProviderPermission},System.String)">
            <summary> Initializes a new instance of ProviderPermissionListResult. </summary>
            <param name="value"> An array of provider permissions. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderPermissionListResult.Value">
            <summary> An array of provider permissions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderPermissionListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProviderRegistrationContent">
            <summary> The provider registration definition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderRegistrationContent.#ctor">
            <summary> Initializes a new instance of ProviderRegistrationContent. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderRegistrationContent.ThirdPartyProviderConsent">
            <summary> The provider consent. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderRegistrationContent.ConsentToAuthorization">
            <summary> A value indicating whether authorization is consented or not. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProviderResourceType">
            <summary> Resource type managed by the resource provider. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderResourceType.#ctor">
            <summary> Initializes a new instance of ProviderResourceType. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderResourceType.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ProviderExtendedLocation},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ResourceTypeAlias},System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ZoneMapping},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ApiProfile},System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary> Initializes a new instance of ProviderResourceType. </summary>
            <param name="resourceType"> The resource type. </param>
            <param name="locations"> The collection of locations where this resource type can be created. </param>
            <param name="locationMappings"> The location mappings that are supported by this resource type. </param>
            <param name="aliases"> The aliases that are supported by this resource type. </param>
            <param name="apiVersions"> The API version. </param>
            <param name="defaultApiVersion"> The default API version. </param>
            <param name="zoneMappings"></param>
            <param name="apiProfiles"> The API profiles for the resource provider. </param>
            <param name="capabilities"> The additional capabilities offered by this resource type. </param>
            <param name="properties"> The properties. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.ResourceType">
            <summary> The resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.Locations">
            <summary> The collection of locations where this resource type can be created. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.LocationMappings">
            <summary> The location mappings that are supported by this resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.Aliases">
            <summary> The aliases that are supported by this resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.ApiVersions">
            <summary> The API version. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.DefaultApiVersion">
            <summary> The default API version. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.ZoneMappings">
            <summary> Gets the zone mappings. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.ApiProfiles">
            <summary> The API profiles for the resource provider. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.Capabilities">
            <summary> The additional capabilities offered by this resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.Properties">
            <summary> The properties. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProviderResourceTypeListResult">
            <summary> List of resource types of a resource provider. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderResourceTypeListResult.#ctor">
            <summary> Initializes a new instance of ProviderResourceTypeListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderResourceTypeListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ProviderResourceType},System.String)">
            <summary> Initializes a new instance of ProviderResourceTypeListResult. </summary>
            <param name="value"> An array of resource types. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceTypeListResult.Value">
            <summary> An array of resource types. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceTypeListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.RegionCategory">
            <summary> The category of the region. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.RegionCategory" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.RegionCategory.Recommended">
            <summary> Recommended. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.RegionCategory.Extended">
            <summary> Extended. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.RegionCategory.Other">
            <summary> Other. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.op_Equality(Azure.ResourceManager.Resources.Models.RegionCategory,Azure.ResourceManager.Resources.Models.RegionCategory)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.RegionCategory" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.op_Inequality(Azure.ResourceManager.Resources.Models.RegionCategory,Azure.ResourceManager.Resources.Models.RegionCategory)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.RegionCategory" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.RegionCategory">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.RegionCategory" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.Equals(Azure.ResourceManager.Resources.Models.RegionCategory)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.RegionType">
            <summary> The type of the region. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.RegionType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.RegionType.Physical">
            <summary> Physical. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.RegionType.Logical">
            <summary> Logical. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.op_Equality(Azure.ResourceManager.Resources.Models.RegionType,Azure.ResourceManager.Resources.Models.RegionType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.RegionType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.op_Inequality(Azure.ResourceManager.Resources.Models.RegionType,Azure.ResourceManager.Resources.Models.RegionType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.RegionType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.RegionType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.RegionType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.Equals(Azure.ResourceManager.Resources.Models.RegionType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceGroupExportResult">
            <summary> Resource group export result. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupExportResult.#ctor">
            <summary> Initializes a new instance of ResourceGroupExportResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupExportResult.#ctor(System.BinaryData,Azure.ResponseError)">
            <summary> Initializes a new instance of ResourceGroupExportResult. </summary>
            <param name="template"> The template content. </param>
            <param name="error"> The template export error. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupExportResult.Template">
            <summary>
            The template content.
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para>
            <para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para>
            <para>
            Examples:
            <list type="bullet">
            <item>
            <term>BinaryData.FromObjectAsJson("foo")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromString("\"foo\"")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            <item>
            <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupExportResult.Error">
            <summary> The template export error. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceGroupListResult">
            <summary> List of resource groups. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupListResult.#ctor">
            <summary> Initializes a new instance of ResourceGroupListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.ResourceGroupData},System.String)">
            <summary> Initializes a new instance of ResourceGroupListResult. </summary>
            <param name="value"> An array of resource groups. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupListResult.Value">
            <summary> An array of resource groups. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceGroupPatch">
            <summary> Resource group information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupPatch.#ctor">
            <summary> Initializes a new instance of ResourceGroupPatch. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupPatch.Name">
            <summary> The name of the resource group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupPatch.Properties">
            <summary> The resource group properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupPatch.ResourceGroupProvisioningState">
            <summary> The provisioning state. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupPatch.ManagedBy">
            <summary> The ID of the resource that manages this resource group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupPatch.Tags">
            <summary> The tags attached to the resource group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceGroupProperties">
            <summary> The resource group properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupProperties.#ctor">
            <summary> Initializes a new instance of ResourceGroupProperties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupProperties.#ctor(System.String)">
            <summary> Initializes a new instance of ResourceGroupProperties. </summary>
            <param name="provisioningState"> The provisioning state. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupProperties.ProvisioningState">
            <summary> The provisioning state. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceListResult">
            <summary> List of resource groups. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceListResult.#ctor">
            <summary> Initializes a new instance of ResourceListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.GenericResourceData},System.String)">
            <summary> Initializes a new instance of ResourceListResult. </summary>
            <param name="value"> An array of resources. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceListResult.Value">
            <summary> An array of resources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceProviderListResult">
            <summary> List of resource providers. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceProviderListResult.#ctor">
            <summary> Initializes a new instance of ResourceProviderListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceProviderListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.ResourceProviderData},System.String)">
            <summary> Initializes a new instance of ResourceProviderListResult. </summary>
            <param name="value"> An array of resource providers. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceProviderListResult.Value">
            <summary> An array of resource providers. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceProviderListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourcesMoveContent">
            <summary> Parameters of move resources. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourcesMoveContent.#ctor">
            <summary> Initializes a new instance of ResourcesMoveContent. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourcesMoveContent.Resources">
            <summary> The IDs of the resources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourcesMoveContent.TargetResourceGroup">
            <summary> The target resource group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourcesSku">
            <summary> SKU for the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourcesSku.#ctor">
            <summary> Initializes a new instance of ResourcesSku. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourcesSku.#ctor(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary> Initializes a new instance of ResourcesSku. </summary>
            <param name="name"> The SKU name. </param>
            <param name="tier"> The SKU tier. </param>
            <param name="size"> The SKU size. </param>
            <param name="family"> The SKU family. </param>
            <param name="model"> The SKU model. </param>
            <param name="capacity"> The SKU capacity. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourcesSku.Name">
            <summary> The SKU name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourcesSku.Tier">
            <summary> The SKU tier. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourcesSku.Size">
            <summary> The SKU size. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourcesSku.Family">
            <summary> The SKU family. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourcesSku.Model">
            <summary> The SKU model. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourcesSku.Capacity">
            <summary> The SKU capacity. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceTypeAlias">
            <summary> The alias type. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAlias.#ctor">
            <summary> Initializes a new instance of ResourceTypeAlias. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAlias.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ResourceTypeAliasPath},System.Nullable{Azure.ResourceManager.Resources.Models.ResourceTypeAliasType},System.String,Azure.ResourceManager.Resources.Models.ResourceTypeAliasPattern,Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathMetadata)">
            <summary> Initializes a new instance of ResourceTypeAlias. </summary>
            <param name="name"> The alias name. </param>
            <param name="paths"> The paths for an alias. </param>
            <param name="aliasType"> The type of the alias. </param>
            <param name="defaultPath"> The default path for an alias. </param>
            <param name="defaultPattern"> The default pattern for an alias. </param>
            <param name="defaultMetadata"> The default alias path metadata. Applies to the default path and to any alias path that doesn't have metadata. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAlias.Name">
            <summary> The alias name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAlias.Paths">
            <summary> The paths for an alias. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAlias.AliasType">
            <summary> The type of the alias. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAlias.DefaultPath">
            <summary> The default path for an alias. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAlias.DefaultPattern">
            <summary> The default pattern for an alias. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAlias.DefaultMetadata">
            <summary> The default alias path metadata. Applies to the default path and to any alias path that doesn't have metadata. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliases">
            <summary> The resource type aliases definition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliases.#ctor">
            <summary> Initializes a new instance of ResourceTypeAliases. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliases.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ResourceTypeAlias})">
            <summary> Initializes a new instance of ResourceTypeAliases. </summary>
            <param name="resourceType"> The resource type name. </param>
            <param name="aliases"> The aliases for property names. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliases.ResourceType">
            <summary> The resource type name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliases.Aliases">
            <summary> The aliases for property names. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPath">
            <summary> The type of the paths for alias. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPath.#ctor">
            <summary> Initializes a new instance of ResourceTypeAliasPath. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPath.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.String},Azure.ResourceManager.Resources.Models.ResourceTypeAliasPattern,Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathMetadata)">
            <summary> Initializes a new instance of ResourceTypeAliasPath. </summary>
            <param name="path"> The path of an alias. </param>
            <param name="apiVersions"> The API versions. </param>
            <param name="pattern"> The pattern for an alias path. </param>
            <param name="metadata"> The metadata of the alias path. If missing, fall back to the default metadata of the alias. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPath.Path">
            <summary> The path of an alias. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPath.ApiVersions">
            <summary> The API versions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPath.Pattern">
            <summary> The pattern for an alias path. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPath.Metadata">
            <summary> The metadata of the alias path. If missing, fall back to the default metadata of the alias. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes">
            <summary> The attributes of the token that the alias path is referring to. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes.None">
            <summary> The token that the alias path is referring to has no attributes. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes.Modifiable">
            <summary> The token that the alias path is referring to is modifiable by policies with 'modify' effect. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes.op_Equality(Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes,Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes.op_Inequality(Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes,Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes.Equals(Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathMetadata">
            <summary> The ResourceTypeAliasPathMetadata. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathMetadata.#ctor">
            <summary> Initializes a new instance of ResourceTypeAliasPathMetadata. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathMetadata.#ctor(System.Nullable{Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType},System.Nullable{Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathAttributes})">
            <summary> Initializes a new instance of ResourceTypeAliasPathMetadata. </summary>
            <param name="tokenType"> The type of the token that the alias path is referring to. </param>
            <param name="attributes"> The attributes of the token that the alias path is referring to. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathMetadata.TokenType">
            <summary> The type of the token that the alias path is referring to. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathMetadata.Attributes">
            <summary> The attributes of the token that the alias path is referring to. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType">
            <summary> The type of the token that the alias path is referring to. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.NotSpecified">
            <summary> The token type is not specified. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.Any">
            <summary> The token type can be anything. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.String">
            <summary> The token type is string. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.Object">
            <summary> The token type is object. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.Array">
            <summary> The token type is array. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.Integer">
            <summary> The token type is integer. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.Number">
            <summary> The token type is number. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.Boolean">
            <summary> The token type is boolean. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.op_Equality(Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType,Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.op_Inequality(Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType,Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.Equals(Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPathTokenType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPattern">
            <summary> The type of the pattern for an alias path. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPattern.#ctor">
            <summary> Initializes a new instance of ResourceTypeAliasPattern. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPattern.#ctor(System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.ResourceTypeAliasPatternType})">
            <summary> Initializes a new instance of ResourceTypeAliasPattern. </summary>
            <param name="phrase"> The alias pattern phrase. </param>
            <param name="variable"> The alias pattern variable. </param>
            <param name="patternType"> The type of alias pattern. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPattern.Phrase">
            <summary> The alias pattern phrase. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPattern.Variable">
            <summary> The alias pattern variable. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPattern.PatternType">
            <summary> The type of alias pattern. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPatternType">
            <summary> The type of alias pattern. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPatternType.NotSpecified">
            <summary> NotSpecified is not allowed. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ResourceTypeAliasPatternType.Extract">
            <summary> Extract is the only allowed value. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceTypeAliasType">
            <summary> The type of the alias. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ResourceTypeAliasType.NotSpecified">
            <summary> Alias type is unknown (same as not providing alias type). </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ResourceTypeAliasType.PlainText">
            <summary> Alias value is not secret. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ResourceTypeAliasType.Mask">
            <summary> Alias value is secret. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SpendingLimit">
            <summary> The subscription spending limit. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SpendingLimit.On">
            <summary> On. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SpendingLimit.Off">
            <summary> Off. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SpendingLimit.CurrentPeriodOff">
            <summary> CurrentPeriodOff. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SubscriptionListResult">
            <summary> Subscription list operation response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubscriptionListResult.#ctor(System.String)">
            <summary> Initializes a new instance of SubscriptionListResult. </summary>
            <param name="nextLink"> The URL to get the next set of results. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubscriptionListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.SubscriptionData},System.String)">
            <summary> Initializes a new instance of SubscriptionListResult. </summary>
            <param name="value"> An array of subscriptions. </param>
            <param name="nextLink"> The URL to get the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubscriptionListResult.Value">
            <summary> An array of subscriptions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubscriptionListResult.NextLink">
            <summary> The URL to get the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SubscriptionPolicies">
            <summary> Subscription policies. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubscriptionPolicies.#ctor">
            <summary> Initializes a new instance of SubscriptionPolicies. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubscriptionPolicies.#ctor(System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.SpendingLimit})">
            <summary> Initializes a new instance of SubscriptionPolicies. </summary>
            <param name="locationPlacementId"> The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions. </param>
            <param name="quotaId"> The subscription quota ID. </param>
            <param name="spendingLimit"> The subscription spending limit. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubscriptionPolicies.LocationPlacementId">
            <summary> The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubscriptionPolicies.QuotaId">
            <summary> The subscription quota ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubscriptionPolicies.SpendingLimit">
            <summary> The subscription spending limit. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SubscriptionState">
            <summary> The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SubscriptionState.Enabled">
            <summary> Enabled. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SubscriptionState.Warned">
            <summary> Warned. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SubscriptionState.PastDue">
            <summary> PastDue. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SubscriptionState.Disabled">
            <summary> Disabled. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SubscriptionState.Deleted">
            <summary> Deleted. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TagPatchMode">
            <summary> The operation type for the patch API. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagPatchMode.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Resources.Models.TagPatchMode" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagPatchMode.Replace">
            <summary> The 'replace' option replaces the entire set of existing tags with a new set. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagPatchMode.Merge">
            <summary> The 'merge' option allows adding tags with new names and updating the values of tags with existing names. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagPatchMode.Delete">
            <summary> The 'delete' option allows selectively deleting tags based on given names or name/value pairs. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagPatchMode.op_Equality(Azure.ResourceManager.Resources.Models.TagPatchMode,Azure.ResourceManager.Resources.Models.TagPatchMode)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.TagPatchMode" /> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagPatchMode.op_Inequality(Azure.ResourceManager.Resources.Models.TagPatchMode,Azure.ResourceManager.Resources.Models.TagPatchMode)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.TagPatchMode" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagPatchMode.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.TagPatchMode">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.TagPatchMode" />. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagPatchMode.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagPatchMode.Equals(Azure.ResourceManager.Resources.Models.TagPatchMode)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagPatchMode.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagPatchMode.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TagResourcePatch">
            <summary> Wrapper resource for tags patch API request only. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagResourcePatch.#ctor">
            <summary> Initializes a new instance of TagResourcePatch. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagResourcePatch.PatchMode">
            <summary> The operation type for the patch API. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagResourcePatch.Properties">
            <summary> The set of tags. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagResourcePatch.TagValues">
            <summary> Dictionary of &lt;string&gt;. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TenantCategory">
            <summary> Category of the tenant. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.TenantCategory.Home">
            <summary> Home. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.TenantCategory.ProjectedBy">
            <summary> ProjectedBy. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.TenantCategory.ManagedBy">
            <summary> ManagedBy. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TenantListResult">
            <summary> Tenant Ids information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TenantListResult.#ctor(System.String)">
            <summary> Initializes a new instance of TenantListResult. </summary>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TenantListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.TenantData},System.String)">
            <summary> Initializes a new instance of TenantListResult. </summary>
            <param name="value"> An array of tenants. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantListResult.Value">
            <summary> An array of tenants. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TenantResourceProvider">
            <summary> Resource provider information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TenantResourceProvider.#ctor">
            <summary> Initializes a new instance of TenantResourceProvider. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TenantResourceProvider.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ProviderResourceType})">
            <summary> Initializes a new instance of TenantResourceProvider. </summary>
            <param name="namespace"> The namespace of the resource provider. </param>
            <param name="resourceTypes"> The collection of provider resource types. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantResourceProvider.Namespace">
            <summary> The namespace of the resource provider. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantResourceProvider.ResourceTypes">
            <summary> The collection of provider resource types. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TenantResourceProviderListResult">
            <summary> List of resource providers. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TenantResourceProviderListResult.#ctor">
            <summary> Initializes a new instance of TenantResourceProviderListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TenantResourceProviderListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.TenantResourceProvider},System.String)">
            <summary> Initializes a new instance of TenantResourceProviderListResult. </summary>
            <param name="value"> An array of resource providers. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantResourceProviderListResult.Value">
            <summary> An array of resource providers. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantResourceProviderListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TrackedResourceExtendedData">
            <summary> Specified resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TrackedResourceExtendedData.#ctor(Azure.Core.AzureLocation)">
            <summary> Initializes a new instance of TrackedResourceExtendedData. </summary>
            <param name="location"> The location. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TrackedResourceExtendedData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,Azure.ResourceManager.Resources.Models.ExtendedLocation)">
            <summary> Initializes a new instance of TrackedResourceExtendedData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="tags"> The tags. </param>
            <param name="location"> The location. </param>
            <param name="extendedLocation"> Resource extended location. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TrackedResourceExtendedData.ExtendedLocation">
            <summary> Resource extended location. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ZoneMapping">
            <summary> The ZoneMapping. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ZoneMapping.#ctor">
            <summary> Initializes a new instance of ZoneMapping. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ZoneMapping.#ctor(System.Nullable{Azure.Core.AzureLocation},System.Collections.Generic.IReadOnlyList{System.String})">
            <summary> Initializes a new instance of ZoneMapping. </summary>
            <param name="location"> The location of the zone mapping. </param>
            <param name="zones"></param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ZoneMapping.Location">
            <summary> The location of the zone mapping. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ZoneMapping.Zones">
            <summary> Gets the zones. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.PolicyAssignmentData">
            <summary> A class representing the PolicyAssignment data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentData.#ctor">
            <summary> Initializes a new instance of PolicyAssignmentData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Nullable{Azure.Core.AzureLocation},Azure.ResourceManager.Models.ManagedServiceIdentity,System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,Azure.ResourceManager.Resources.Models.ArmPolicyParameterValue},System.String,System.BinaryData,System.Nullable{Azure.ResourceManager.Resources.Models.EnforcementMode},System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.NonComplianceMessage})">
            <summary> Initializes a new instance of PolicyAssignmentData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="location"> The location of the policy assignment. Only required when utilizing managed identity. </param>
            <param name="managedIdentity"> The managed identity associated with the policy assignment. </param>
            <param name="displayName"> The display name of the policy assignment. </param>
            <param name="policyDefinitionId"> The ID of the policy definition or policy set definition being assigned. </param>
            <param name="scope"> The scope for the policy assignment. </param>
            <param name="excludedScopes"> The policy's excluded scopes. </param>
            <param name="parameters"> The parameter values for the assigned policy rule. The keys are the parameter names. </param>
            <param name="description"> This message will be part of response in case of policy violation. </param>
            <param name="metadata"> The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs. </param>
            <param name="enforcementMode"> The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. </param>
            <param name="nonComplianceMessages"> The messages that describe why a resource is non-compliant with the policy. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.Location">
            <summary> The location of the policy assignment. Only required when utilizing managed identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.Identity">
            <summary> The managed identity associated with the policy assignment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.ManagedIdentity">
            <summary> The managed identity associated with the policy assignment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.DisplayName">
            <summary> The display name of the policy assignment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.PolicyDefinitionId">
            <summary> The ID of the policy definition or policy set definition being assigned. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.Scope">
            <summary> The scope for the policy assignment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.ExcludedScopes">
            <summary> The policy's excluded scopes. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.Parameters">
            <summary> The parameter values for the assigned policy rule. The keys are the parameter names. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.Description">
            <summary> This message will be part of response in case of policy violation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.Metadata">
            <summary> The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.EnforcementMode">
            <summary> The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentData.NonComplianceMessages">
            <summary> The messages that describe why a resource is non-compliant with the policy. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceGroupBuilder">
            <summary>
            A class representing a builder object used to create Azure resources.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupBuilder.#ctor(Azure.ResourceManager.Resources.ResourceGroupCollection,Azure.ResourceManager.Resources.ResourceGroupData)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceGroupBuilder" /> class.
            </summary>
            <param name="collection"> The collection object to create the resource in. </param>
            <param name="resource"> The resource to create. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupBuilder.Resource">
            <summary>
            Gets the resource object to create.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupBuilder.ResourceName">
            <summary>
            Gets the resource name.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupBuilder.Collection">
            <summary>
            Gets the collection object to create the resource in.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupBuilder.Build">
            <summary>
            Creates the resource object to send to the Azure API.
            </summary>
            <returns> The resource to create. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupBuilder.CreateOrUpdate(System.String,Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            The operation to create or update a resource. Please note some properties can be set only during creation.
            </summary>
            <param name="name"> The name of the new resource to create. </param>
            <param name="waitUntil"> Waits for the completion of the long running operations. </param>
            <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="P:System.Threading.CancellationToken.None" />. </param>
            <returns> A response with the <see cref="T:Azure.ResourceManager.ArmOperation`1" /> operation for this resource. </returns>
            <exception cref="T:System.ArgumentException"> Name cannot be null or a whitespace. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupBuilder.CreateOrUpdateAsync(System.String,Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            The operation to create or update a resource. Please note some properties can be set only during creation.
            </summary>
            <param name="name"> The name of the new resource to create. </param>
            <param name="waitUntil"> Waits for the completion of the long running operations. </param>
            <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="P:System.Threading.CancellationToken.None" />. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> that on completion returns a response with the <see cref="T:Azure.ResourceManager.ArmOperation`1" /> operation for this resource. </returns>
            <exception cref="T:System.ArgumentException"> Name cannot be null or a whitespace. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupBuilder.IsValid(System.String@)">
            <summary>
            Determines whether or not the resource is valid.
            </summary>
            <param name="message"> The message indicating what is wrong with the resource. </param>
            <returns> Whether or not the resource is valid. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupBuilder.OnAfterBuild">
            <summary>
            Perform any tasks necessary after the resource is built.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupBuilder.OnBeforeBuild">
            <summary>
            Perform any tasks necessary before the resource is built.
            </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceGroupCollection">
            <summary> A class representing collection of ResourceGroupResource and their operations over its parent. </summary>
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.ResourceGroupCollection" /> instance call the GetResourceGroups method from an instance of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.Construct(Azure.Core.AzureLocation,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Constructs an object used to create a resource group.
            </summary>
            <param name="location"> The location of the resource group. </param>
            <param name="tags"> The tags of the resource group. </param>
            <param name="managedBy"> Who the resource group is managed by. </param>
            <returns> A builder with <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> and <see cref="T:Azure.ResourceManager.Resources.ResourceGroupData" />. </returns>
            <exception cref="T:System.ArgumentNullException"> Location cannot be null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceGroupCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceGroupCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.ResourceGroupData,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a resource group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="resourceGroupName"> The name of the resource group to create or update. Can include alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that match the allowed characters. </param>
            <param name="data"> Parameters supplied to the create or update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.ResourceGroupData,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a resource group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="resourceGroupName"> The name of the resource group to create or update. Can include alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that match the allowed characters. </param>
            <param name="data"> Parameters supplied to the create or update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a resource group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a resource group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.GetAllAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all the resource groups for a subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_List</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.GetAll(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all the resource groups for a subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_List</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceGroupResource">
            <summary> A Class representing a ResourceGroupResource along with the instance operations that can be performed on it. </summary>
            <summary>
            A Class representing a ResourceGroup along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetResourceGroupResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> using the GetResourceGroup method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.GetGenericResourcesAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources
            ContextualPath: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}
            OperationId: Resources_ListByResourceGroup
            <summary> Get all the resources for a resource group. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.GenericResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.GetGenericResources(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources
            ContextualPath: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}
            OperationId: Resources_ListByResourceGroup
            <summary> Get all the resources for a resource group. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.GenericResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.CreateResourceIdentifier(System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.ResourceGroupData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.ResourceGroupResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a resource group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.Get(System.Threading.CancellationToken)">
            <summary>
            Gets a resource group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.DeleteAsync(Azure.WaitUntil,System.String,System.Threading.CancellationToken)">
            <summary>
            When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Delete</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="forceDeletionTypes"> The resource types you want to force delete. Currently, only the following is supported: forceDeletionTypes=Microsoft.Compute/virtualMachines,Microsoft.Compute/virtualMachineScaleSets. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.Delete(Azure.WaitUntil,System.String,System.Threading.CancellationToken)">
            <summary>
            When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Delete</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="forceDeletionTypes"> The resource types you want to force delete. Currently, only the following is supported: forceDeletionTypes=Microsoft.Compute/virtualMachines,Microsoft.Compute/virtualMachineScaleSets. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.UpdateAsync(Azure.ResourceManager.Resources.Models.ResourceGroupPatch,System.Threading.CancellationToken)">
            <summary>
            Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Update</description>
            </item>
            </list>
            </summary>
            <param name="patch"> Parameters supplied to update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="patch" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.Update(Azure.ResourceManager.Resources.Models.ResourceGroupPatch,System.Threading.CancellationToken)">
            <summary>
            Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Update</description>
            </item>
            </list>
            </summary>
            <param name="patch"> Parameters supplied to update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="patch" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.ExportTemplateAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.Models.ExportTemplate,System.Threading.CancellationToken)">
            <summary>
            Captures the specified resource group as a template.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_ExportTemplate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="exportTemplate"> Parameters for exporting the template. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exportTemplate" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.ExportTemplate(Azure.WaitUntil,Azure.ResourceManager.Resources.Models.ExportTemplate,System.Threading.CancellationToken)">
            <summary>
            Captures the specified resource group as a template.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_ExportTemplate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="exportTemplate"> Parameters for exporting the template. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exportTemplate" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.MoveResourcesAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.Models.ResourcesMoveContent,System.Threading.CancellationToken)">
            <summary>
            The resources to be moved must be in the same source resource group in the source subscription being used. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. 
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_MoveResources</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="content"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.MoveResources(Azure.WaitUntil,Azure.ResourceManager.Resources.Models.ResourcesMoveContent,System.Threading.CancellationToken)">
            <summary>
            The resources to be moved must be in the same source resource group in the source subscription being used. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. 
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_MoveResources</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="content"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.ValidateMoveResourcesAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.Models.ResourcesMoveContent,System.Threading.CancellationToken)">
            <summary>
            This operation checks whether the specified resources can be moved to the target. The resources to be moved must be in the same source resource group in the source subscription being used. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_ValidateMoveResources</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="content"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.ValidateMoveResources(Azure.WaitUntil,Azure.ResourceManager.Resources.Models.ResourcesMoveContent,System.Threading.CancellationToken)">
            <summary>
            This operation checks whether the specified resources can be moved to the target. The resources to be moved must be in the same source resource group in the source subscription being used. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_ValidateMoveResources</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="content"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.AddTagAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Add a tag to the current resource.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="key"> The key for the tag. </param>
            <param name="value"> The value for the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="key" /> or <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.AddTag(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Add a tag to the current resource.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="key"> The key for the tag. </param>
            <param name="value"> The value for the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="key" /> or <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.SetTagsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Replace the tags on the resource with the given set.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="tags"> The set of tags to use as replacement. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.SetTags(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Replace the tags on the resource with the given set.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="tags"> The set of tags to use as replacement. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.RemoveTagAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a tag by key from the resource.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="key"> The key for the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="key" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupResource.RemoveTag(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a tag by key from the resource.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="key"> The key for the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="key" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceProviderCollection">
            <summary> A class representing collection of Provider and their operations over its parent. </summary>
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.ResourceProviderCollection" /> instance call the GetResourceProviders method from an instance of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.#ctor(Azure.ResourceManager.ArmResource)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceProviderCollection" /> class. </summary>
            <param name="parent"> The resource representing the parent resource. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.GetAllAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all resource providers for a subscription.
            Request Path: /subscriptions/{subscriptionId}/providers
            Operation Id: Providers_List
            </summary>
            <param name="top"> [This parameter is no longer supported.] The number of results to return. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.GetAll(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all resource providers for a subscription.
            Request Path: /subscriptions/{subscriptionId}/providers
            Operation Id: Providers_List
            </summary>
            <param name="top"> [This parameter is no longer supported.] The number of results to return. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceProviderCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.GetAllAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all resource providers for a subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_List</description>
            </item>
            </list>
            </summary>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.GetAll(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all resource providers for a subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_List</description>
            </item>
            </list>
            </summary>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.ExistsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.Exists(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceProviderData">
            <summary> A class representing the Provider data model. </summary>
            <summary> A class representing the ResourceProvider data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderData.#ctor">
            <summary> Initializes a new instance of ProviderData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderData.#ctor(Azure.Core.ResourceIdentifier,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ProviderResourceType},System.Nullable{Azure.ResourceManager.Resources.Models.ProviderAuthorizationConsentState})">
            <summary> Initializes a new instance of ProviderData. </summary>
            <param name="id"> The provider ID. </param>
            <param name="namespace"> The namespace of the resource provider. </param>
            <param name="registrationState"> The registration state of the resource provider. </param>
            <param name="registrationPolicy"> The registration policy of the resource provider. </param>
            <param name="resourceTypes"> The collection of provider resource types. </param>
            <param name="providerAuthorizationConsentState"> The provider authorization consent state. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceProviderData.Id">
            <summary> The provider ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceProviderData.Namespace">
            <summary> The namespace of the resource provider. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceProviderData.RegistrationState">
            <summary> The registration state of the resource provider. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceProviderData.RegistrationPolicy">
            <summary> The registration policy of the resource provider. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceProviderData.ResourceTypes">
            <summary> The collection of provider resource types. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceProviderData.ProviderAuthorizationConsentState">
            <summary> The provider authorization consent state. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceProviderResource">
            <summary> A Class representing a Provider along with the instance operations that can be performed on it. </summary>
            <summary>
            A Class representing a ResourceProvider along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetResourceProviderResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> using the GetResourceProvider method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.CreateResourceIdentifier(System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.ResourceProviderData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.ResourceProviderResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceProviderResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceProviderResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.GetFeatures">
            <summary> Gets a collection of FeatureResources in the ResourceProvider. </summary>
            <returns> An object representing collection of FeatureResources and their operations over a FeatureResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.GetFeatureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the preview feature with the specified name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Get</description>
            </item>
            </list>
            </summary>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="featureName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.GetFeature(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the preview feature with the specified name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Get</description>
            </item>
            </list>
            </summary>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="featureName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Get</description>
            </item>
            </list>
            </summary>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Get</description>
            </item>
            </list>
            </summary>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.UnregisterAsync(System.Threading.CancellationToken)">
            <summary>
            Unregisters a subscription from a resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Unregister</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.Unregister(System.Threading.CancellationToken)">
            <summary>
            Unregisters a subscription from a resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Unregister</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.ProviderPermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get the provider permissions.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/providerPermissions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_ProviderPermissions</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.Models.ProviderPermission" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.ProviderPermissions(System.Threading.CancellationToken)">
            <summary>
            Get the provider permissions.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/providerPermissions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_ProviderPermissions</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.Models.ProviderPermission" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.RegisterAsync(Azure.ResourceManager.Resources.Models.ProviderRegistrationContent,System.Threading.CancellationToken)">
            <summary>
            Registers a subscription with a resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Register</description>
            </item>
            </list>
            </summary>
            <param name="content"> The third party consent for S2S. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.Register(Azure.ResourceManager.Resources.Models.ProviderRegistrationContent,System.Threading.CancellationToken)">
            <summary>
            Registers a subscription with a resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Register</description>
            </item>
            </list>
            </summary>
            <param name="content"> The third party consent for S2S. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.GetProviderResourceTypesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            List the resource types for a specified resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/resourceTypes</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ProviderResourceTypes_List</description>
            </item>
            </list>
            </summary>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.Models.ProviderResourceType" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderResource.GetProviderResourceTypes(System.String,System.Threading.CancellationToken)">
            <summary>
            List the resource types for a specified resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/resourceTypes</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ProviderResourceTypes_List</description>
            </item>
            </list>
            </summary>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.Models.ProviderResourceType" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of ResourcesRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListByResourceGroupAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources for a resource group. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The resource group with the resources to get. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListByResourceGroup(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources for a resource group. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The resource group with the resources to get. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources in a subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;Filter comparison operators include `eq` (equals) and `ne` (not equals) and may be used with the following properties: `location`, `resourceType`, `name`, `resourceGroup`, `identity`, `identity/principalId`, `plan`, `plan/publisher`, `plan/product`, `plan/name`, `plan/version`, and `plan/promotionCode`.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use `$filter=resourceType eq 'Microsoft.Network/virtualNetworks'`&lt;br&gt;&lt;br&gt;&lt;br&gt;`substringof(value, property)` can  be used to filter for substrings of the following currently-supported properties: `name` and `resourceGroup`&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the resource name, use `$filter=substringof('demo', name)`&lt;br&gt;&lt;br&gt;Multiple substring operations can also be combined using `and`/`or` operators.&lt;br&gt;&lt;br&gt;Note that any truncated number of results queried via `$top` may also not be compatible when using a filter.&lt;br&gt;&lt;br&gt;&lt;br&gt;Resources can be filtered by tag names and values. For example, to filter for a tag name and value, use `$filter=tagName eq 'tag1' and tagValue eq 'Value1'`. Note that when resources are filtered by tag name and value, &lt;b&gt;the original tags for each resource will not be returned in the results.&lt;/b&gt; Any list of additional properties queried via `$expand` may also not be compatible when filtering by tag names/values. &lt;br&gt;&lt;br&gt;For tag names only, resources can be filtered by prefix using the following syntax: `$filter=startswith(tagName, 'depart')`. This query will return all resources with a tag name prefixed by the phrase `depart` (i.e.`department`, `departureDate`, `departureTime`, etc.)&lt;br&gt;&lt;br&gt;&lt;br&gt;Note that some properties can be combined when filtering resources, which include the following: `substringof() and/or resourceType`, `plan and plan/publisher and plan/name`, and `identity and identity/principalId`. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of recommendations per page if a paged version of this API is being used. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.List(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources in a subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;Filter comparison operators include `eq` (equals) and `ne` (not equals) and may be used with the following properties: `location`, `resourceType`, `name`, `resourceGroup`, `identity`, `identity/principalId`, `plan`, `plan/publisher`, `plan/product`, `plan/name`, `plan/version`, and `plan/promotionCode`.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use `$filter=resourceType eq 'Microsoft.Network/virtualNetworks'`&lt;br&gt;&lt;br&gt;&lt;br&gt;`substringof(value, property)` can  be used to filter for substrings of the following currently-supported properties: `name` and `resourceGroup`&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the resource name, use `$filter=substringof('demo', name)`&lt;br&gt;&lt;br&gt;Multiple substring operations can also be combined using `and`/`or` operators.&lt;br&gt;&lt;br&gt;Note that any truncated number of results queried via `$top` may also not be compatible when using a filter.&lt;br&gt;&lt;br&gt;&lt;br&gt;Resources can be filtered by tag names and values. For example, to filter for a tag name and value, use `$filter=tagName eq 'tag1' and tagValue eq 'Value1'`. Note that when resources are filtered by tag name and value, &lt;b&gt;the original tags for each resource will not be returned in the results.&lt;/b&gt; Any list of additional properties queried via `$expand` may also not be compatible when filtering by tag names/values. &lt;br&gt;&lt;br&gt;For tag names only, resources can be filtered by prefix using the following syntax: `$filter=startswith(tagName, 'depart')`. This query will return all resources with a tag name prefixed by the phrase `depart` (i.e.`department`, `departureDate`, `departureTime`, etc.)&lt;br&gt;&lt;br&gt;&lt;br&gt;Note that some properties can be combined when filtering resources, which include the following: `substringof() and/or resourceType`, `plan and plan/publisher and plan/name`, and `identity and identity/principalId`. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of recommendations per page if a paged version of this API is being used. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.DeleteByIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.DeleteById(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.CreateOrUpdateByIdAsync(System.String,System.String,Azure.ResourceManager.Resources.GenericResourceData,System.Threading.CancellationToken)">
            <summary> Create a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="data"> Create or update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> or <paramref name="apiVersion" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.CreateOrUpdateById(System.String,System.String,Azure.ResourceManager.Resources.GenericResourceData,System.Threading.CancellationToken)">
            <summary> Create a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="data"> Create or update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> or <paramref name="apiVersion" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.UpdateByIdAsync(System.String,System.String,Azure.ResourceManager.Resources.GenericResourceData,System.Threading.CancellationToken)">
            <summary> Updates a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="data"> Update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> or <paramref name="apiVersion" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.UpdateById(System.String,System.String,Azure.ResourceManager.Resources.GenericResourceData,System.Threading.CancellationToken)">
            <summary> Updates a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="data"> Update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> or <paramref name="apiVersion" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.GetByIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.GetById(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListByResourceGroupNextPageAsync(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources for a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The resource group with the resources to get. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListByResourceGroupNextPage(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources for a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The resource group with the resources to get. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListNextPageAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources in a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;Filter comparison operators include `eq` (equals) and `ne` (not equals) and may be used with the following properties: `location`, `resourceType`, `name`, `resourceGroup`, `identity`, `identity/principalId`, `plan`, `plan/publisher`, `plan/product`, `plan/name`, `plan/version`, and `plan/promotionCode`.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use `$filter=resourceType eq 'Microsoft.Network/virtualNetworks'`&lt;br&gt;&lt;br&gt;&lt;br&gt;`substringof(value, property)` can  be used to filter for substrings of the following currently-supported properties: `name` and `resourceGroup`&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the resource name, use `$filter=substringof('demo', name)`&lt;br&gt;&lt;br&gt;Multiple substring operations can also be combined using `and`/`or` operators.&lt;br&gt;&lt;br&gt;Note that any truncated number of results queried via `$top` may also not be compatible when using a filter.&lt;br&gt;&lt;br&gt;&lt;br&gt;Resources can be filtered by tag names and values. For example, to filter for a tag name and value, use `$filter=tagName eq 'tag1' and tagValue eq 'Value1'`. Note that when resources are filtered by tag name and value, &lt;b&gt;the original tags for each resource will not be returned in the results.&lt;/b&gt; Any list of additional properties queried via `$expand` may also not be compatible when filtering by tag names/values. &lt;br&gt;&lt;br&gt;For tag names only, resources can be filtered by prefix using the following syntax: `$filter=startswith(tagName, 'depart')`. This query will return all resources with a tag name prefixed by the phrase `depart` (i.e.`department`, `departureDate`, `departureTime`, etc.)&lt;br&gt;&lt;br&gt;&lt;br&gt;Note that some properties can be combined when filtering resources, which include the following: `substringof() and/or resourceType`, `plan and plan/publisher and plan/name`, and `identity and identity/principalId`. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of recommendations per page if a paged version of this API is being used. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListNextPage(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources in a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;Filter comparison operators include `eq` (equals) and `ne` (not equals) and may be used with the following properties: `location`, `resourceType`, `name`, `resourceGroup`, `identity`, `identity/principalId`, `plan`, `plan/publisher`, `plan/product`, `plan/name`, `plan/version`, and `plan/promotionCode`.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use `$filter=resourceType eq 'Microsoft.Network/virtualNetworks'`&lt;br&gt;&lt;br&gt;&lt;br&gt;`substringof(value, property)` can  be used to filter for substrings of the following currently-supported properties: `name` and `resourceGroup`&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the resource name, use `$filter=substringof('demo', name)`&lt;br&gt;&lt;br&gt;Multiple substring operations can also be combined using `and`/`or` operators.&lt;br&gt;&lt;br&gt;Note that any truncated number of results queried via `$top` may also not be compatible when using a filter.&lt;br&gt;&lt;br&gt;&lt;br&gt;Resources can be filtered by tag names and values. For example, to filter for a tag name and value, use `$filter=tagName eq 'tag1' and tagValue eq 'Value1'`. Note that when resources are filtered by tag name and value, &lt;b&gt;the original tags for each resource will not be returned in the results.&lt;/b&gt; Any list of additional properties queried via `$expand` may also not be compatible when filtering by tag names/values. &lt;br&gt;&lt;br&gt;For tag names only, resources can be filtered by prefix using the following syntax: `$filter=startswith(tagName, 'depart')`. This query will return all resources with a tag name prefixed by the phrase `depart` (i.e.`department`, `departureDate`, `departureTime`, etc.)&lt;br&gt;&lt;br&gt;&lt;br&gt;Note that some properties can be combined when filtering resources, which include the following: `substringof() and/or resourceType`, `plan and plan/publisher and plan/name`, and `identity and identity/principalId`. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of recommendations per page if a paged version of this API is being used. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.RestOperations.#ctor(System.String,System.String,Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of RestOperations. </summary>
            <param name="nameSpace"> The namespace to get the operations for. </param>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The client options used to construct the current client. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.RestOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> Gets a list of operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.RestOperations.List(System.Threading.CancellationToken)">
            <summary> Gets a list of operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of TenantsRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsRestOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> Gets the tenants for your account. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsRestOperations.List(System.Threading.CancellationToken)">
            <summary> Gets the tenants for your account. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsRestOperations.ListNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets the tenants for your account. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsRestOperations.ListNextPage(System.String,System.Threading.CancellationToken)">
            <summary> Gets the tenants for your account. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.SubscriptionData">
            <summary> A class representing the Subscription data model. </summary>
            <summary> A class representing the Subscription data model. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionData.Id">
            <summary> The ARM resource identifier.</summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionData.#ctor">
            <summary> Initializes a new instance of SubscriptionData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionData.#ctor(Azure.Core.ResourceIdentifier,System.String,System.String,System.Nullable{System.Guid},System.Nullable{Azure.ResourceManager.Resources.Models.SubscriptionState},Azure.ResourceManager.Resources.Models.SubscriptionPolicies,System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ManagedByTenant},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary> Initializes a new instance of SubscriptionData. </summary>
            <param name="id"> The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000. </param>
            <param name="subscriptionId"> The subscription ID. </param>
            <param name="displayName"> The subscription display name. </param>
            <param name="tenantId"> The subscription tenant ID. </param>
            <param name="state"> The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted. </param>
            <param name="subscriptionPolicies"> The subscription policies. </param>
            <param name="authorizationSource"> The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, 'Legacy, RoleBased'. </param>
            <param name="managedByTenants"> An array containing the tenants managing the subscription. </param>
            <param name="tags"> The tags attached to the subscription. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionData.SubscriptionId">
            <summary> The subscription ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionData.DisplayName">
            <summary> The subscription display name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionData.TenantId">
            <summary> The subscription tenant ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionData.State">
            <summary> The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionData.SubscriptionPolicies">
            <summary> The subscription policies. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionData.AuthorizationSource">
            <summary> The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, 'Legacy, RoleBased'. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionData.ManagedByTenants">
            <summary> An array containing the tenants managing the subscription. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionData.Tags">
            <summary> The tags attached to the subscription. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.SubscriptionResource">
            <summary>
            A class representing the operations that can be performed over a specific subscription.
            </summary>
            <summary>
            A Class representing a Subscription along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetSubscriptionResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> using the GetSubscription method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetGenericResourcesAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            RequestPath: /subscriptions/{subscriptionId}/resources
            ContextualPath: /subscriptions/{subscriptionId}
            OperationId: Resources_List
            <summary> Get all the resources in a subscription. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.GenericResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetGenericResources(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            RequestPath: /subscriptions/{subscriptionId}/resources
            ContextualPath: /subscriptions/{subscriptionId}
            OperationId: Resources_List
            <summary> Get all the resources in a subscription. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.GenericResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetArmRestApis(System.String)">
            <summary>
            Gets the RestApi definition for a given Azure namespace.
            </summary>
            <param name="azureNamespace"> The namespace to get the rest API for. </param>
            <returns> A collection representing the rest apis for the namespace. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.CreateResourceIdentifier(System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.SubscriptionData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.SubscriptionResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetResourceProviders">
            <summary> Gets a collection of ResourceProviderResources in the Subscription. </summary>
            <returns> An object representing collection of ResourceProviderResources and their operations over a ResourceProviderResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetResourceProviderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetResourceProvider(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified resource provider.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Providers_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetResourceGroups">
            <summary> Gets a collection of ResourceGroupResources in the Subscription. </summary>
            <returns> An object representing collection of ResourceGroupResources and their operations over a ResourceGroupResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetResourceGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a resource group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetResourceGroup(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a resource group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ResourceGroups_Get</description>
            </item>
            </list>
            </summary>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetSubscriptionPolicyDefinitions">
            <summary> Gets a collection of SubscriptionPolicyDefinitionResources in the Subscription. </summary>
            <returns> An object representing collection of SubscriptionPolicyDefinitionResources and their operations over a SubscriptionPolicyDefinitionResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetSubscriptionPolicyDefinitionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetSubscriptionPolicyDefinition(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetSubscriptionPolicySetDefinitions">
            <summary> Gets a collection of SubscriptionPolicySetDefinitionResources in the Subscription. </summary>
            <returns> An object representing collection of SubscriptionPolicySetDefinitionResources and their operations over a SubscriptionPolicySetDefinitionResource. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetSubscriptionPolicySetDefinitionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetSubscriptionPolicySetDefinition(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Gets details about a specified subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.Get(System.Threading.CancellationToken)">
            <summary>
            Gets details about a specified subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.DeletePredefinedTagValueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_DeleteValue</description>
            </item>
            </list>
            </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="tagName" /> or <paramref name="tagValue" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName" /> or <paramref name="tagValue" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.DeletePredefinedTagValue(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_DeleteValue</description>
            </item>
            </list>
            </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="tagName" /> or <paramref name="tagValue" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName" /> or <paramref name="tagValue" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.CreateOrUpdatePredefinedTagValueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_CreateOrUpdateValue</description>
            </item>
            </list>
            </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="tagName" /> or <paramref name="tagValue" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName" /> or <paramref name="tagValue" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.CreateOrUpdatePredefinedTagValue(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_CreateOrUpdateValue</description>
            </item>
            </list>
            </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="tagName" /> or <paramref name="tagValue" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName" /> or <paramref name="tagValue" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.CreateOrUpdatePredefinedTagAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/tagNames/{tagName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="tagName"> The name of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="tagName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.CreateOrUpdatePredefinedTag(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/tagNames/{tagName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="tagName"> The name of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="tagName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.DeletePredefinedTagAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/tagNames/{tagName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_Delete</description>
            </item>
            </list>
            </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="tagName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.DeletePredefinedTag(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/tagNames/{tagName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_Delete</description>
            </item>
            </list>
            </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="tagName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetAllPredefinedTagsAsync(System.Threading.CancellationToken)">
            <summary>
            This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/tagNames</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_List</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.Models.PredefinedTag" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetAllPredefinedTags(System.Threading.CancellationToken)">
            <summary>
            This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/tagNames</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_List</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.Models.PredefinedTag" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetLocationsAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/locations</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_ListLocations</description>
            </item>
            </list>
            </summary>
            <param name="includeExtendedLocations"> Whether to include extended locations. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.Models.LocationExpanded" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetLocations(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/locations</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_ListLocations</description>
            </item>
            </list>
            </summary>
            <param name="includeExtendedLocations"> Whether to include extended locations. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.Models.LocationExpanded" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetFeaturesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all the preview features that are available through AFEC for the subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/features</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_ListAll</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionResource.GetFeatures(System.Threading.CancellationToken)">
            <summary>
            Gets all the preview features that are available through AFEC for the subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/features</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_ListAll</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TagResource">
            <summary>
            A Class representing a TagResource along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.TagResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetTagResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.ArmResource" /> using the GetTagResource method.
            </summary>
            <summary>
            A Class representing a TagResource along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.TagResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetTagResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.ArmResource" /> using the GetTagResource method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.UpdateAsync(Azure.ResourceManager.Resources.Models.TagResourcePatch,System.Threading.CancellationToken)">
            <summary>
            This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows adding tags with new names and updating the values of tags with existing names. The 'delete' option allows selectively deleting tags based on given names or name/value pairs.
            Request Path: /{scope}/providers/Microsoft.Resources/tags/default
            Operation Id: Tags_UpdateAtScope
            </summary>
            <param name="patch"> The TagResourcePatch to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="patch" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.Update(Azure.ResourceManager.Resources.Models.TagResourcePatch,System.Threading.CancellationToken)">
            <summary>
            This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows adding tags with new names and updating the values of tags with existing names. The 'delete' option allows selectively deleting tags based on given names or name/value pairs.
            Request Path: /{scope}/providers/Microsoft.Resources/tags/default
            Operation Id: Tags_UpdateAtScope
            </summary>
            <param name="patch"> The TagResourcePatch to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="patch" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.CreateResourceIdentifier(System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.TagResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TagResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.TagResourceData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TagResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TagResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.TagResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TagResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TagResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the entire set of tags on a resource or subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Resources/tags/default</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_GetAtScope</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.Get(System.Threading.CancellationToken)">
            <summary>
            Gets the entire set of tags on a resource or subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Resources/tags/default</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_GetAtScope</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Deletes the entire set of tags on a resource or subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Resources/tags/default</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_DeleteAtScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Deletes the entire set of tags on a resource or subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Resources/tags/default</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_DeleteAtScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.Models.TagResourcePatch,System.Threading.CancellationToken)">
            <summary>
            This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows adding tags with new names and updating the values of tags with existing names. The 'delete' option allows selectively deleting tags based on given names or name/value pairs.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Resources/tags/default</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_UpdateAtScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="patch"> The TagResourcePatch to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="patch" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.Update(Azure.WaitUntil,Azure.ResourceManager.Resources.Models.TagResourcePatch,System.Threading.CancellationToken)">
            <summary>
            This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows adding tags with new names and updating the values of tags with existing names. The 'delete' option allows selectively deleting tags based on given names or name/value pairs.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Resources/tags/default</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_UpdateAtScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="patch"> The TagResourcePatch to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="patch" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.CreateOrUpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.TagResourceData,System.Threading.CancellationToken)">
            <summary>
            This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Resources/tags/default</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_CreateOrUpdateAtScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> The TagResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResource.CreateOrUpdate(Azure.WaitUntil,Azure.ResourceManager.Resources.TagResourceData,System.Threading.CancellationToken)">
            <summary>
            This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Resources/tags/default</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tags_CreateOrUpdateAtScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> The TagResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TenantCollection">
            <summary>
            A class representing collection of TenantResource and their operations over their parent.
            </summary>
            <summary> A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> and their operations. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantCollection.#ctor(Azure.ResourceManager.ArmClient)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantCollection" /> class. </summary>
            <param name="client"> The resource representing the parent resource. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantCollection.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the tenants for your account.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/tenants</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tenants_List</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantCollection.GetAll(System.Threading.CancellationToken)">
            <summary>
            Gets the tenants for your account.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/tenants</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Tenants_List</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="T:Azure.ResourceManager.Resources.DataPolicyManifestCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestCollection" /> instance call the GetDataPolicyManifests method from an instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the data policy manifest with the given policy mode.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/dataPolicyManifests/{policyMode}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>DataPolicyManifests_GetByPolicyMode</description>
            </item>
            </list>
            </summary>
            <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyMode" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyMode" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the data policy manifest with the given policy mode.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/dataPolicyManifests/{policyMode}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>DataPolicyManifests_GetByPolicyMode</description>
            </item>
            </list>
            </summary>
            <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyMode" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyMode" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.GetAllAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the data policy manifests that match the optional given $filter. Valid values for $filter are: "$filter=namespace eq '{0}'". If $filter is not provided, the unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/dataPolicyManifests</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>DataPolicyManifests_List</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: "namespace eq '{value}'". If $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.GetAll(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the data policy manifests that match the optional given $filter. Valid values for $filter are: "$filter=namespace eq '{0}'". If $filter is not provided, the unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/dataPolicyManifests</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>DataPolicyManifests_List</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: "namespace eq '{value}'". If $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/dataPolicyManifests/{policyMode}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>DataPolicyManifests_GetByPolicyMode</description>
            </item>
            </list>
            </summary>
            <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyMode" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyMode" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/dataPolicyManifests/{policyMode}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>DataPolicyManifests_GetByPolicyMode</description>
            </item>
            </list>
            </summary>
            <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyMode" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyMode" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.DataPolicyManifestData">
            <summary> A class representing the DataPolicyManifest data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestData.#ctor">
            <summary> Initializes a new instance of DataPolicyManifestData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ResourceTypeAliases},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.DataPolicyManifestEffect},System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.DataManifestCustomResourceFunctionDefinition})">
            <summary> Initializes a new instance of DataPolicyManifestData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="namespaces"> The list of namespaces for the data policy manifest. </param>
            <param name="policyMode"> The policy mode of the data policy manifest. </param>
            <param name="isBuiltInOnly"> A value indicating whether policy mode is allowed only in built-in definitions. </param>
            <param name="resourceTypeAliases"> An array of resource type aliases. </param>
            <param name="effects"> The effect definition. </param>
            <param name="fieldValues"> The non-alias field accessor values that can be used in the policy rule. </param>
            <param name="standard"> The standard resource functions (subscription and/or resourceGroup). </param>
            <param name="customDefinitions"> An array of data manifest custom resource definition. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DataPolicyManifestData.Namespaces">
            <summary> The list of namespaces for the data policy manifest. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DataPolicyManifestData.PolicyMode">
            <summary> The policy mode of the data policy manifest. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DataPolicyManifestData.IsBuiltInOnly">
            <summary> A value indicating whether policy mode is allowed only in built-in definitions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DataPolicyManifestData.ResourceTypeAliases">
            <summary> An array of resource type aliases. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DataPolicyManifestData.Effects">
            <summary> The effect definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DataPolicyManifestData.FieldValues">
            <summary> The non-alias field accessor values that can be used in the policy rule. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DataPolicyManifestData.Standard">
            <summary> The standard resource functions (subscription and/or resourceGroup). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DataPolicyManifestData.CustomDefinitions">
            <summary> An array of data manifest custom resource definition. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.DataPolicyManifestResource">
            <summary>
            A Class representing a DataPolicyManifest along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetDataPolicyManifestResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> using the GetDataPolicyManifest method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestResource.CreateResourceIdentifier(System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.DataPolicyManifestData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.DataPolicyManifestResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.DataPolicyManifestResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DataPolicyManifestResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DataPolicyManifestResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the data policy manifest with the given policy mode.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/dataPolicyManifests/{policyMode}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>DataPolicyManifests_GetByPolicyMode</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestResource.Get(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the data policy manifest with the given policy mode.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/dataPolicyManifests/{policyMode}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>DataPolicyManifests_GetByPolicyMode</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.ResourceManager.Resources.FeatureCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.FeatureCollection" /> instance call the GetFeatures method from an instance of <see cref="T:Azure.ResourceManager.Resources.ResourceProviderResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.FeatureCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.FeatureCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the preview feature with the specified name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Get</description>
            </item>
            </list>
            </summary>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="featureName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the preview feature with the specified name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Get</description>
            </item>
            </list>
            </summary>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="featureName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all the preview features in a provider namespace that are available through AFEC for the subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_List</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.GetAll(System.Threading.CancellationToken)">
            <summary>
            Gets all the preview features in a provider namespace that are available through AFEC for the subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_List</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.FeatureResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Get</description>
            </item>
            </list>
            </summary>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="featureName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Features_Get</description>
            </item>
            </list>
            </summary>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="featureName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.FeatureData">
            <summary> A class representing the Feature data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureData.#ctor">
            <summary> Initializes a new instance of FeatureData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,Azure.ResourceManager.Resources.Models.FeatureProperties)">
            <summary> Initializes a new instance of FeatureData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="properties"> Properties of the previewed feature. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.FeatureData.Properties">
            <summary> Properties of the previewed feature. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.FeatureData.FeatureState">
            <summary> The registration state of the feature for the subscription. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation.#ctor">
            <summary> Initializes a new instance of ResourcesArmOperation for mocking. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesArmOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesArmOperation.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final response of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation`1.#ctor">
            <summary> Initializes a new instance of ResourcesArmOperation for mocking. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesArmOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesArmOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesArmOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesArmOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesArmOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection" /> instance call the GetManagementGroupPolicyDefinitions method from an instance of <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_CreateOrUpdateAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_CreateOrUpdateAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.GetAllAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the policy definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_ListByManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.GetAll(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the policy definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_ListByManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource">
            <summary>
            A Class representing a ManagementGroupPolicyDefinition along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetManagementGroupPolicyDefinitionResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> using the GetManagementGroupPolicyDefinition method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.CreateResourceIdentifier(System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.PolicyDefinitionData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.Get(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            This operation deletes the policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_DeleteAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            This operation deletes the policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_DeleteAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_CreateOrUpdateAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionResource.Update(Azure.WaitUntil,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_CreateOrUpdateAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection" /> instance call the GetManagementGroupPolicySetDefinitions method from an instance of <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_CreateOrUpdateAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_CreateOrUpdateAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.GetAllAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the policy set definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_ListByManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.GetAll(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the policy set definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_ListByManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource">
            <summary>
            A Class representing a ManagementGroupPolicySetDefinition along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetManagementGroupPolicySetDefinitionResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> using the GetManagementGroupPolicySetDefinition method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.CreateResourceIdentifier(System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.PolicySetDefinitionData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.Get(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            This operation deletes the policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_DeleteAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            This operation deletes the policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_DeleteAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_CreateOrUpdateAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionResource.Update(Azure.WaitUntil,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy set definition in the given management group with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_CreateOrUpdateAtManagementGroup</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ManagementLockCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.ArmResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.ManagementLockCollection" /> instance call the GetManagementLocks method from an instance of <see cref="T:Azure.ResourceManager.ArmResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementLockCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementLockCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.ManagementLockData,System.Threading.CancellationToken)">
            <summary>
            Create or update a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_CreateOrUpdateByScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="data"> Create or update management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.ManagementLockData,System.Threading.CancellationToken)">
            <summary>
            Create or update a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_CreateOrUpdateByScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="data"> Create or update management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_GetByScope</description>
            </item>
            </list>
            </summary>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_GetByScope</description>
            </item>
            </list>
            </summary>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.GetAllAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all the management locks for a scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_ListByScope</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.GetAll(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all the management locks for a scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_ListByScope</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_GetByScope</description>
            </item>
            </list>
            </summary>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_GetByScope</description>
            </item>
            </list>
            </summary>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ManagementLockData">
            <summary> A class representing the ManagementLock data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockData.#ctor(Azure.ResourceManager.Resources.Models.ManagementLockLevel)">
            <summary> Initializes a new instance of ManagementLockData. </summary>
            <param name="level"> The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,Azure.ResourceManager.Resources.Models.ManagementLockLevel,System.String,System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.ManagementLockOwner})">
            <summary> Initializes a new instance of ManagementLockData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="level"> The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it. </param>
            <param name="notes"> Notes about the lock. Maximum of 512 characters. </param>
            <param name="owners"> The owners of the lock. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ManagementLockData.Level">
            <summary> The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ManagementLockData.Notes">
            <summary> Notes about the lock. Maximum of 512 characters. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ManagementLockData.Owners">
            <summary> The owners of the lock. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ManagementLockResource">
            <summary>
            A Class representing a ManagementLock along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetManagementLockResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.ArmResource" /> using the GetManagementLock method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockResource.CreateResourceIdentifier(System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.ManagementLockData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.ManagementLockResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.ManagementLockResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ManagementLockResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ManagementLockResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Get a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_GetByScope</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockResource.Get(System.Threading.CancellationToken)">
            <summary>
            Get a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_GetByScope</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Delete a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_DeleteByScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            Delete a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_DeleteByScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.ManagementLockData,System.Threading.CancellationToken)">
            <summary>
            Create or update a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_CreateOrUpdateByScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> Create or update management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockResource.Update(Azure.WaitUntil,Azure.ResourceManager.Resources.ManagementLockData,System.Threading.CancellationToken)">
            <summary>
            Create or update a management lock by scope.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/locks/{lockName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>ManagementLocks_CreateOrUpdateByScope</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> Create or update management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.PolicyDefinitionData">
            <summary> A class representing the PolicyDefinition data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionData.#ctor">
            <summary> Initializes a new instance of PolicyDefinitionData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Nullable{Azure.ResourceManager.Resources.Models.PolicyType},System.String,System.String,System.String,System.BinaryData,System.BinaryData,System.Collections.Generic.IDictionary{System.String,Azure.ResourceManager.Resources.Models.ArmPolicyParameter})">
            <summary> Initializes a new instance of PolicyDefinitionData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="policyType"> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </param>
            <param name="mode"> The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. </param>
            <param name="displayName"> The display name of the policy definition. </param>
            <param name="description"> The policy definition description. </param>
            <param name="policyRule"> The policy rule. </param>
            <param name="metadata"> The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </param>
            <param name="parameters"> The parameter definitions for parameters used in the policy rule. The keys are the parameter names. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyDefinitionData.PolicyType">
            <summary> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyDefinitionData.Mode">
            <summary> The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyDefinitionData.DisplayName">
            <summary> The display name of the policy definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyDefinitionData.Description">
            <summary> The policy definition description. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyDefinitionData.PolicyRule">
            <summary>
            The policy rule.
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para>
            <para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para>
            <para>
            Examples:
            <list type="bullet">
            <item>
            <term>BinaryData.FromObjectAsJson("foo")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromString("\"foo\"")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            <item>
            <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyDefinitionData.Metadata">
            <summary>
            The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para>
            <para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para>
            <para>
            Examples:
            <list type="bullet">
            <item>
            <term>BinaryData.FromObjectAsJson("foo")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromString("\"foo\"")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            <item>
            <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyDefinitionData.Parameters">
            <summary> The parameter definitions for parameters used in the policy rule. The keys are the parameter names. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.PolicySetDefinitionData">
            <summary> A class representing the PolicySetDefinition data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionData.#ctor">
            <summary> Initializes a new instance of PolicySetDefinitionData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Nullable{Azure.ResourceManager.Resources.Models.PolicyType},System.String,System.String,System.BinaryData,System.Collections.Generic.IDictionary{System.String,Azure.ResourceManager.Resources.Models.ArmPolicyParameter},System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.PolicyDefinitionReference},System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup})">
            <summary> Initializes a new instance of PolicySetDefinitionData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="policyType"> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </param>
            <param name="displayName"> The display name of the policy set definition. </param>
            <param name="description"> The policy set definition description. </param>
            <param name="metadata"> The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </param>
            <param name="parameters"> The policy set definition parameters that can be used in policy definition references. </param>
            <param name="policyDefinitions"> An array of policy definition references. </param>
            <param name="policyDefinitionGroups"> The metadata describing groups of policy definition references within the policy set definition. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicySetDefinitionData.PolicyType">
            <summary> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicySetDefinitionData.DisplayName">
            <summary> The display name of the policy set definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicySetDefinitionData.Description">
            <summary> The policy set definition description. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicySetDefinitionData.Metadata">
            <summary>
            The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para>
            <para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para>
            <para>
            Examples:
            <list type="bullet">
            <item>
            <term>BinaryData.FromObjectAsJson("foo")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromString("\"foo\"")</term>
            <description>Creates a payload of "foo".</description>
            </item>
            <item>
            <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            <item>
            <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
            <description>Creates a payload of { "key": "value" }.</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicySetDefinitionData.Parameters">
            <summary> The policy set definition parameters that can be used in policy definition references. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicySetDefinitionData.PolicyDefinitions">
            <summary> An array of policy definition references. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicySetDefinitionData.PolicyDefinitionGroups">
            <summary> The metadata describing groups of policy definition references within the policy set definition. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceGroupData">
            <summary> A class representing the ResourceGroup data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupData.#ctor(Azure.Core.AzureLocation)">
            <summary> Initializes a new instance of ResourceGroupData. </summary>
            <param name="location"> The location. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,Azure.ResourceManager.Resources.Models.ResourceGroupProperties,System.String)">
            <summary> Initializes a new instance of ResourceGroupData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="tags"> The tags. </param>
            <param name="location"> The location. </param>
            <param name="properties"> The resource group properties. </param>
            <param name="managedBy"> The ID of the resource that manages this resource group. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupData.Properties">
            <summary> The resource group properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupData.ResourceGroupProvisioningState">
            <summary> The provisioning state. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupData.ManagedBy">
            <summary> The ID of the resource that manages this resource group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TagResourceData">
            <summary> A class representing the TagResource data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResourceData.#ctor(Azure.ResourceManager.Resources.Models.Tag)">
            <summary> Initializes a new instance of TagResourceData. </summary>
            <param name="properties"> The set of tags. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="properties" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagResourceData.#ctor(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,Azure.ResourceManager.Resources.Models.Tag)">
            <summary> Initializes a new instance of TagResourceData. </summary>
            <param name="id"> The id. </param>
            <param name="name"> The name. </param>
            <param name="resourceType"> The resourceType. </param>
            <param name="systemData"> The systemData. </param>
            <param name="properties"> The set of tags. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TagResourceData.Properties">
            <summary> The set of tags. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TagResourceData.TagValues">
            <summary> Dictionary of &lt;string&gt;. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TenantData">
            <summary> A class representing the Tenant data model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantData.#ctor">
            <summary> Initializes a new instance of TenantData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantData.#ctor(System.String,System.Nullable{System.Guid},System.Nullable{Azure.ResourceManager.Resources.Models.TenantCategory},System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String,System.String,System.Uri)">
            <summary> Initializes a new instance of TenantData. </summary>
            <param name="id"> The fully qualified ID of the tenant. For example, /tenants/00000000-0000-0000-0000-000000000000. </param>
            <param name="tenantId"> The tenant ID. For example, 00000000-0000-0000-0000-000000000000. </param>
            <param name="tenantCategory"> Category of the tenant. </param>
            <param name="country"> Country/region name of the address for the tenant. </param>
            <param name="countryCode"> Country/region abbreviation for the tenant. </param>
            <param name="displayName"> The display name of the tenant. </param>
            <param name="domains"> The list of domains for the tenant. </param>
            <param name="defaultDomain"> The default domain for the tenant. </param>
            <param name="tenantType"> The tenant type. Only available for 'Home' tenant category. </param>
            <param name="tenantBrandingLogoUri"> The tenant's branding logo URL. Only available for 'Home' tenant category. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantData.Id">
            <summary> The fully qualified ID of the tenant. For example, /tenants/00000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantData.TenantId">
            <summary> The tenant ID. For example, 00000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantData.TenantCategory">
            <summary> Category of the tenant. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantData.Country">
            <summary> Country/region name of the address for the tenant. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantData.CountryCode">
            <summary> Country/region abbreviation for the tenant. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantData.DisplayName">
            <summary> The display name of the tenant. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantData.Domains">
            <summary> The list of domains for the tenant. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantData.DefaultDomain">
            <summary> The default domain for the tenant. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantData.TenantType">
            <summary> The tenant type. Only available for 'Home' tenant category. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantData.TenantBrandingLogoUri">
            <summary> The tenant's branding logo URL. Only available for 'Home' tenant category. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.PolicyAssignmentCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.ArmResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentCollection" /> instance call the GetPolicyAssignments method from an instance of <see cref="T:Azure.ResourceManager.ArmResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.PolicyAssignmentData,System.Threading.CancellationToken)">
            <summary>
             This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Create</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="policyAssignmentName"> The name of the policy assignment. </param>
            <param name="data"> Parameters for the policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.PolicyAssignmentData,System.Threading.CancellationToken)">
            <summary>
             This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Create</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="policyAssignmentName"> The name of the policy assignment. </param>
            <param name="data"> Parameters for the policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a single policy assignment, given its name and the scope it was created at.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a single policy assignment, given its name and the scope it was created at.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.GetAllAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_ListForResourceGroup</description>
            </item>
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_ListForResource</description>
            </item>
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyAssignments</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_ListForManagementGroup</description>
            </item>
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_List</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.GetAll(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_ListForResourceGroup</description>
            </item>
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_ListForResource</description>
            </item>
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyAssignments</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_ListForManagementGroup</description>
            </item>
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_List</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.PolicyAssignmentResource">
            <summary>
            A Class representing a PolicyAssignment along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetPolicyAssignmentResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.ArmResource" /> using the GetPolicyAssignment method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.CreateResourceIdentifier(System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.PolicyAssignmentData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.PolicyAssignmentResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.PolicyAssignmentResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.PolicyAssignmentResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a single policy assignment, given its name and the scope it was created at.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.Get(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a single policy assignment, given its name and the scope it was created at.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Delete</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Delete</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.PolicyAssignmentData,System.Threading.CancellationToken)">
            <summary>
             This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Create</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> Parameters for the policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentResource.Update(Azure.WaitUntil,Azure.ResourceManager.Resources.PolicyAssignmentData,System.Threading.CancellationToken)">
            <summary>
             This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyAssignments_Create</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> Parameters for the policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestsRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of DataPolicyManifestsRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestsRestOperations.GetByPolicyModeAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the data policy manifest with the given policy mode. </summary>
            <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyMode" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policyMode" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestsRestOperations.GetByPolicyMode(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the data policy manifest with the given policy mode. </summary>
            <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyMode" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policyMode" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestsRestOperations.ListAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the data policy manifests that match the optional given $filter. Valid values for $filter are: "$filter=namespace eq '{0}'". If $filter is not provided, the unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: "namespace eq '{value}'". If $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestsRestOperations.List(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the data policy manifests that match the optional given $filter. Valid values for $filter are: "$filter=namespace eq '{0}'". If $filter is not provided, the unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: "namespace eq '{value}'". If $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestsRestOperations.ListNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the data policy manifests that match the optional given $filter. Valid values for $filter are: "$filter=namespace eq '{0}'". If $filter is not provided, the unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: "namespace eq '{value}'". If $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestsRestOperations.ListNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the data policy manifests that match the optional given $filter. Valid values for $filter are: "$filter=namespace eq '{0}'". If $filter is not provided, the unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: "namespace eq '{value}'". If $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of FeaturesRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListAllAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features that are available through AFEC for the subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListAll(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features that are available through AFEC for the subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features in a provider namespace that are available through AFEC for the subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider for getting features. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.List(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features in a provider namespace that are available through AFEC for the subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider for getting features. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.GetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the preview feature with the specified name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The resource provider namespace for the feature. </param>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.Get(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the preview feature with the specified name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The resource provider namespace for the feature. </param>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.RegisterAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Registers the preview feature for the subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to register. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.Register(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Registers the preview feature for the subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to register. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.UnregisterAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Unregisters the preview feature for the subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.Unregister(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Unregisters the preview feature for the subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceProviderNamespace" /> or <paramref name="featureName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListAllNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features that are available through AFEC for the subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListAllNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features that are available through AFEC for the subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListNextPageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features in a provider namespace that are available through AFEC for the subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider for getting features. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListNextPage(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features in a provider namespace that are available through AFEC for the subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider for getting features. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of ManagementLocksRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.CreateOrUpdateByScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.ManagementLockData,System.Threading.CancellationToken)">
            <summary> Create or update a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use '/subscriptions/{subscriptionId}' for subscriptions, '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}' for resources. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="data"> Create or update management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" />, <paramref name="lockName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.CreateOrUpdateByScope(System.String,System.String,Azure.ResourceManager.Resources.ManagementLockData,System.Threading.CancellationToken)">
            <summary> Create or update a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use '/subscriptions/{subscriptionId}' for subscriptions, '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}' for resources. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="data"> Create or update management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" />, <paramref name="lockName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.DeleteByScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Delete a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="lockName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.DeleteByScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Delete a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="lockName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.GetByScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="lockName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.GetByScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="lockName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="lockName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListByScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use '/subscriptions/{subscriptionId}' for subscriptions, '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}' for resources. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListByScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use '/subscriptions/{subscriptionId}' for subscriptions, '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}' for resources. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListByScopeNextPageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use '/subscriptions/{subscriptionId}' for subscriptions, '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}' for resources. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListByScopeNextPage(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use '/subscriptions/{subscriptionId}' for subscriptions, '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}' for resources. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of PolicyAssignmentsRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="policyAssignmentName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="policyAssignmentName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.CreateAsync(System.String,System.String,Azure.ResourceManager.Resources.PolicyAssignmentData,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. </param>
            <param name="policyAssignmentName"> The name of the policy assignment. </param>
            <param name="data"> Parameters for the policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" />, <paramref name="policyAssignmentName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.Create(System.String,System.String,Azure.ResourceManager.Resources.PolicyAssignmentData,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. </param>
            <param name="policyAssignmentName"> The name of the policy assignment. </param>
            <param name="data"> Parameters for the policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" />, <paramref name="policyAssignmentName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a single policy assignment, given its name and the scope it was created at. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="policyAssignmentName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a single policy assignment, given its name and the scope it was created at. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="policyAssignmentName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceGroupAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group that contains policy assignments. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceGroup(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group that contains policy assignments. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp'). </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group containing the resource. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines). </param>
            <param name="parentResourcePath"> The parent resource path. Use empty string if there is none. </param>
            <param name="resourceType"> The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites). </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="resourceProviderNamespace" />, <paramref name="parentResourcePath" />, <paramref name="resourceType" /> or <paramref name="resourceName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="resourceProviderNamespace" /> or <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResource(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp'). </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group containing the resource. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines). </param>
            <param name="parentResourcePath"> The parent resource path. Use empty string if there is none. </param>
            <param name="resourceType"> The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites). </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="resourceProviderNamespace" />, <paramref name="parentResourcePath" />, <paramref name="resourceType" /> or <paramref name="resourceName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="resourceProviderNamespace" /> or <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForManagementGroupAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group's ancestors. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForManagementGroup(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group's ancestors. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.List(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceGroupNextPageAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group that contains policy assignments. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceGroupNextPage(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group that contains policy assignments. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceNextPageAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp'). </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group containing the resource. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines). </param>
            <param name="parentResourcePath"> The parent resource path. Use empty string if there is none. </param>
            <param name="resourceType"> The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites). </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="resourceProviderNamespace" />, <paramref name="parentResourcePath" />, <paramref name="resourceType" /> or <paramref name="resourceName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="resourceProviderNamespace" /> or <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceNextPage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp'). </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group containing the resource. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines). </param>
            <param name="parentResourcePath"> The parent resource path. Use empty string if there is none. </param>
            <param name="resourceType"> The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites). </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="resourceProviderNamespace" />, <paramref name="parentResourcePath" />, <paramref name="resourceType" /> or <paramref name="resourceName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="resourceProviderNamespace" /> or <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForManagementGroupNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group's ancestors. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForManagementGroupNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group's ancestors. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of PolicyDefinitionsRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.CreateOrUpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="policyDefinitionName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.CreateOrUpdate(System.String,System.String,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="policyDefinitionName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="policyDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="policyDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="policyDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="policyDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.GetBuiltInAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy definition with the given name. </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.GetBuiltIn(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy definition with the given name. </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.CreateOrUpdateAtManagementGroupAsync(System.String,System.String,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" />, <paramref name="policyDefinitionName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.CreateOrUpdateAtManagementGroup(System.String,System.String,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" />, <paramref name="policyDefinitionName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.DeleteAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> or <paramref name="policyDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.DeleteAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> or <paramref name="policyDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.GetAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> or <paramref name="policyDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.GetAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> or <paramref name="policyDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.List(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListBuiltInAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy definitions that match the optional given $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all built-in policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy definitions whose category match the {value}. </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListBuiltIn(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy definitions that match the optional given $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all built-in policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy definitions whose category match the {value}. </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListByManagementGroupAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListByManagementGroup(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListBuiltInNextPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy definitions that match the optional given $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all built-in policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListBuiltInNextPage(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy definitions that match the optional given $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all built-in policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListByManagementGroupNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListByManagementGroupNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of PolicySetDefinitionsRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.CreateOrUpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="policySetDefinitionName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.CreateOrUpdate(System.String,System.String,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="policySetDefinitionName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="policySetDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="policySetDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="policySetDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given subscription with the given name. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="policySetDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.GetBuiltInAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy set definition with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.GetBuiltIn(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy set definition with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.List(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListBuiltInAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy set definitions that match the optional given $filter. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy set definitions whose category match the {value}. </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListBuiltIn(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy set definitions that match the optional given $filter. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy set definitions whose category match the {value}. </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.CreateOrUpdateAtManagementGroupAsync(System.String,System.String,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" />, <paramref name="policySetDefinitionName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.CreateOrUpdateAtManagementGroup(System.String,System.String,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" />, <paramref name="policySetDefinitionName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.DeleteAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> or <paramref name="policySetDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.DeleteAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> or <paramref name="policySetDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.GetAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> or <paramref name="policySetDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.GetAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given management group with the given name. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> or <paramref name="policySetDefinitionName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> or <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListByManagementGroupAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListByManagementGroup(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListBuiltInNextPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy set definitions that match the optional given $filter. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy set definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListBuiltInNextPage(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy set definitions that match the optional given $filter. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy set definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListByManagementGroupNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListByManagementGroupNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="managementGroupId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="managementGroupId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProviderResourceTypesRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of ProviderResourceTypesRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProviderResourceTypesRestOperations.ListAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> List the resource types for a specified resource provider. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProviderResourceTypesRestOperations.List(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> List the resource types for a specified resource provider. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of ProvidersRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.UnregisterAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Unregisters a subscription from a resource provider. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.Unregister(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Unregisters a subscription from a resource provider. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ProviderPermissionsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get the provider permissions. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ProviderPermissions(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get the provider permissions. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.RegisterAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ProviderRegistrationContent,System.Threading.CancellationToken)">
            <summary> Registers a subscription with a resource provider. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to register. </param>
            <param name="content"> The third party consent for S2S. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.Register(System.String,System.String,Azure.ResourceManager.Resources.Models.ProviderRegistrationContent,System.Threading.CancellationToken)">
            <summary> Registers a subscription with a resource provider. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to register. </param>
            <param name="content"> The third party consent for S2S. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.List(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for the tenant. </summary>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for the tenant. </summary>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.GetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.Get(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.GetAtTenantScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider at the tenant level. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.GetAtTenantScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider at the tenant level. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="resourceProviderNamespace" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListNextPageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListNextPage(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListAtTenantScopeNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for the tenant. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListAtTenantScopeNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for the tenant. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of ResourceGroupsRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.CreateOrUpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.ResourceGroupData,System.Threading.CancellationToken)">
            <summary> Creates or updates a resource group. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group to create or update. Can include alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that match the allowed characters. </param>
            <param name="data"> Parameters supplied to the create or update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.CreateOrUpdate(System.String,System.String,Azure.ResourceManager.Resources.ResourceGroupData,System.Threading.CancellationToken)">
            <summary> Creates or updates a resource group. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group to create or update. Can include alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that match the allowed characters. </param>
            <param name="data"> Parameters supplied to the create or update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.DeleteAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group to delete. The name is case insensitive. </param>
            <param name="forceDeletionTypes"> The resource types you want to force delete. Currently, only the following is supported: forceDeletionTypes=Microsoft.Compute/virtualMachines,Microsoft.Compute/virtualMachineScaleSets. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.Delete(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group to delete. The name is case insensitive. </param>
            <param name="forceDeletionTypes"> The resource types you want to force delete. Currently, only the following is supported: forceDeletionTypes=Microsoft.Compute/virtualMachines,Microsoft.Compute/virtualMachineScaleSets. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource group. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource group. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.UpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ResourceGroupPatch,System.Threading.CancellationToken)">
            <summary> Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group to update. The name is case insensitive. </param>
            <param name="patch"> Parameters supplied to update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="patch" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.Update(System.String,System.String,Azure.ResourceManager.Resources.Models.ResourceGroupPatch,System.Threading.CancellationToken)">
            <summary> Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group to update. The name is case insensitive. </param>
            <param name="patch"> Parameters supplied to update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="patch" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ExportTemplateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ExportTemplate,System.Threading.CancellationToken)">
            <summary> Captures the specified resource group as a template. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="exportTemplate"> Parameters for exporting the template. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="exportTemplate" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ExportTemplate(System.String,System.String,Azure.ResourceManager.Resources.Models.ExportTemplate,System.Threading.CancellationToken)">
            <summary> Captures the specified resource group as a template. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="exportTemplate"> Parameters for exporting the template. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="exportTemplate" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="resourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ListAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all the resource groups for a subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.List(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all the resource groups for a subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.MoveResourcesAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveContent,System.Threading.CancellationToken)">
            <summary> The resources to be moved must be in the same source resource group in the source subscription being used. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="sourceResourceGroupName"> The name of the resource group from the source subscription containing the resources to be moved. </param>
            <param name="content"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="sourceResourceGroupName" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="sourceResourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.MoveResources(System.String,System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveContent,System.Threading.CancellationToken)">
            <summary> The resources to be moved must be in the same source resource group in the source subscription being used. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="sourceResourceGroupName"> The name of the resource group from the source subscription containing the resources to be moved. </param>
            <param name="content"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="sourceResourceGroupName" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="sourceResourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ValidateMoveResourcesAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveContent,System.Threading.CancellationToken)">
            <summary> This operation checks whether the specified resources can be moved to the target. The resources to be moved must be in the same source resource group in the source subscription being used. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="sourceResourceGroupName"> The name of the resource group from the source subscription containing the resources to be validated for move. </param>
            <param name="content"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="sourceResourceGroupName" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="sourceResourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ValidateMoveResources(System.String,System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveContent,System.Threading.CancellationToken)">
            <summary> This operation checks whether the specified resources can be moved to the target. The resources to be moved must be in the same source resource group in the source subscription being used. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="sourceResourceGroupName"> The name of the resource group from the source subscription containing the resources to be validated for move. </param>
            <param name="content"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="sourceResourceGroupName" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="sourceResourceGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ListNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all the resource groups for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ListNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all the resource groups for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of SubscriptionsRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.ListLocationsAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary> This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="includeExtendedLocations"> Whether to include extended locations. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.ListLocations(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary> This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="includeExtendedLocations"> Whether to include extended locations. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets details about a specified subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> Gets details about a specified subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> Gets all subscriptions for a tenant. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.List(System.Threading.CancellationToken)">
            <summary> Gets all subscriptions for a tenant. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.ListNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all subscriptions for a tenant. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.ListNextPage(System.String,System.Threading.CancellationToken)">
            <summary> Gets all subscriptions for a tenant. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.#ctor(Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri,System.String)">
            <summary> Initializes a new instance of TagsRestOperations. </summary>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="applicationId"> The application id to use for user agent. </param>
            <param name="endpoint"> server parameter. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.DeleteValueAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="tagName" /> or <paramref name="tagValue" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="tagName" /> or <paramref name="tagValue" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.DeleteValue(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="tagName" /> or <paramref name="tagValue" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="tagName" /> or <paramref name="tagValue" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdateValueAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="tagName" /> or <paramref name="tagValue" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="tagName" /> or <paramref name="tagValue" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdateValue(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" />, <paramref name="tagName" /> or <paramref name="tagValue" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" />, <paramref name="tagName" /> or <paramref name="tagValue" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="tagName"> The name of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="tagName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="tagName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdate(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="tagName"> The name of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="tagName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="tagName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="tagName"> The name of the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="tagName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="tagName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="tagName"> The name of the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> or <paramref name="tagName" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> or <paramref name="tagName" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.ListAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.List(System.String,System.Threading.CancellationToken)">
            <summary> This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdateAtScopeAsync(System.String,Azure.ResourceManager.Resources.TagResourceData,System.Threading.CancellationToken)">
            <summary> This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="data"> The TagResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdateAtScope(System.String,Azure.ResourceManager.Resources.TagResourceData,System.Threading.CancellationToken)">
            <summary> This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="data"> The TagResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.UpdateAtScopeAsync(System.String,Azure.ResourceManager.Resources.Models.TagResourcePatch,System.Threading.CancellationToken)">
            <summary> This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows adding tags with new names and updating the values of tags with existing names. The 'delete' option allows selectively deleting tags based on given names or name/value pairs. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="patch"> The TagResourcePatch to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="patch" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.UpdateAtScope(System.String,Azure.ResourceManager.Resources.Models.TagResourcePatch,System.Threading.CancellationToken)">
            <summary> This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows adding tags with new names and updating the values of tags with existing names. The 'delete' option allows selectively deleting tags based on given names or name/value pairs. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="patch"> The TagResourcePatch to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> or <paramref name="patch" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.GetAtScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.GetAtScope(System.String,System.Threading.CancellationToken)">
            <summary> Gets the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.DeleteAtScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.DeleteAtScope(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.ListNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.ListNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="subscriptionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.SubscriptionCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.SubscriptionCollection" /> instance call the GetSubscriptions method from an instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets details about a specified subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_Get</description>
            </item>
            </list>
            </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets details about a specified subscription.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_Get</description>
            </item>
            </list>
            </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all subscriptions for a tenant.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_List</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.GetAll(System.Threading.CancellationToken)">
            <summary>
            Gets all subscriptions for a tenant.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_List</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_Get</description>
            </item>
            </list>
            </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>Subscriptions_Get</description>
            </item>
            </list>
            </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="subscriptionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection" /> instance call the GetSubscriptionPolicyDefinitions method from an instance of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.GetAllAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the policy definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_List</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.GetAll(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the policy definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_List</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource">
            <summary>
            A Class representing a SubscriptionPolicyDefinition along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetSubscriptionPolicyDefinitionResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> using the GetSubscriptionPolicyDefinition method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.CreateResourceIdentifier(System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.PolicyDefinitionData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.Get(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            This operation deletes the policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_Delete</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            This operation deletes the policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_Delete</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionResource.Update(Azure.WaitUntil,Azure.ResourceManager.Resources.PolicyDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection" /> instance call the GetSubscriptionPolicySetDefinitions method from an instance of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.GetAllAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the policy set definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_List</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.GetAll(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the policy set definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_List</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource">
            <summary>
            A Class representing a SubscriptionPolicySetDefinition along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetSubscriptionPolicySetDefinitionResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> using the GetSubscriptionPolicySetDefinition method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.CreateResourceIdentifier(System.String,System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.PolicySetDefinitionData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.Get(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_Get</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            This operation deletes the policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_Delete</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)">
            <summary>
            This operation deletes the policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_Delete</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionResource.Update(Azure.WaitUntil,Azure.ResourceManager.Resources.PolicySetDefinitionData,System.Threading.CancellationToken)">
            <summary>
            This operation creates or updates a policy set definition in the given subscription with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_CreateOrUpdate</description>
            </item>
            </list>
            </summary>
            <param name="waitUntil"> <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
            <param name="data"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection" /> instance call the GetTenantPolicyDefinitions method from an instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.GetAllAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the built-in policy definitions that match the optional given $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all built-in policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policyDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_ListBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.GetAll(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the built-in policy definitions that match the optional given $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all built-in policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policyDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_ListBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policyDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource">
            <summary>
            A Class representing a TenantPolicyDefinition along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetTenantPolicyDefinitionResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> using the GetTenantPolicyDefinition method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource.CreateResourceIdentifier(System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.PolicyDefinitionData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionResource.Get(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicyDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection">
            <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            To get a <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection" /> instance call the GetTenantPolicySetDefinitions method from an instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy set definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy set definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.GetAllAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the built-in policy set definitions that match the optional given $filter. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy set definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policySetDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_ListBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.GetAll(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This operation retrieves a list of all the built-in policy set definitions that match the optional given $filter. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy set definitions whose category match the {value}.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policySetDefinitions</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_ListBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}. </param>
            <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.Exists(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentException"> <paramref name="policySetDefinitionName" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName" /> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource">
            <summary>
            A Class representing a TenantPolicySetDefinition along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetTenantPolicySetDefinitionResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> using the GetTenantPolicySetDefinition method.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource.CreateResourceIdentifier(System.String)">
            <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> class for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.ResourceManager.Resources.PolicySetDefinitionData)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="data"> The resource that is the target of operations. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource.#ctor(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)">
            <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource" /> class. </summary>
            <param name="client"> The client parameters to use in these operations. </param>
            <param name="id"> The identifier of the resource that is the target of operations. </param>
        </member>
        <member name="F:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource.ResourceType">
            <summary> Gets the resource type for the operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource.HasData">
            <summary> Gets whether or not the current instance has data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource.Data">
            <summary> Gets the data representing this Feature. </summary>
            <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource.GetAsync(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy set definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionResource.Get(System.Threading.CancellationToken)">
            <summary>
            This operation retrieves the built-in policy set definition with the given name.
            <list type="bullet">
            <item>
            <term>Request Path</term>
            <description>/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}</description>
            </item>
            <item>
            <term>Operation Id</term>
            <description>PolicySetDefinitions_GetBuiltIn</description>
            </item>
            </list>
            </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.ResourceManager.ResourceManagerExtensions">
            <summary>
            Extension class for resource manager.
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.ResourceManagerExtensions.GetCorrelationId(Azure.Response)">
            <summary>
            Gets the correlation id from x-ms-correlation-id.
            </summary>
        </member>
        <member name="T:Azure.ResourceManager.SharedExtensions">
            <summary>
            helper class
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.SharedExtensions.SubstringAfterProviderNamespace(Azure.Core.ResourceIdentifier)">
            <summary>
            Collects the segments in a resource identifier into a string
            </summary>
            <param name="resourceId">the resource identifier</param>
            <returns></returns>
        </member>
        <member name="M:Azure.ResourceManager.SharedExtensions.ReplaceWith(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            An extension method for supporting replacing one dictionary content with another one.
            This is used to support resource tags.
            </summary>
            <param name="dest"> The destination dictionary in which the content will be replaced. </param>
            <param name="src"> The source dictionary from which the content is copied from. </param>
            <returns> The destination dictionary that has been altered. </returns>
        </member>
        <member name="T:Azure.Core.HashCodeBuilder">
            <summary>
            Copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/HashCode.cs.
            </summary>
        </member>
        <member name="T:Azure.Core.InitializationConstructorAttribute">
            <summary>
            An attribute class indicating to AutoRest which constructor to use for initialization.
            </summary>
        </member>
        <member name="T:Azure.Core.PropertyReferenceTypeAttribute">
            <summary>
            An attribute class indicating to Autorest a reference type for code generation.
            </summary>
        </member>
        <member name="M:Azure.Core.PropertyReferenceTypeAttribute.#ctor(System.String[])">
            <summary>
            Instatiate a new reference type attribute.
            </summary>
            <param name="optionalProperties"> An array of property names that are optional when comparing the type. </param>
        </member>
        <member name="M:Azure.Core.PropertyReferenceTypeAttribute.#ctor">
            <summary>
            Instantiate a new reference type attribute.
            </summary>
        </member>
        <member name="P:Azure.Core.PropertyReferenceTypeAttribute.OptionalProperties">
            <summary>
            Get an array of property names that are optional when comparing the type.
            </summary>
        </member>
        <member name="T:Azure.Core.ReferenceTypeAttribute">
            <summary>
            An attribute class indicating to Autorest a reference type for code generation.
            </summary>
        </member>
        <member name="M:Azure.Core.ReferenceTypeAttribute.#ctor(System.String[])">
            <summary>
            Instantiate a new reference type attribute.
            </summary>
            <param name="optionalProperties"> An array of property names that are optional when comparing the type. </param>
        </member>
        <member name="M:Azure.Core.ReferenceTypeAttribute.#ctor">
            <summary>
            Instantiate a new reference type attribute.
            </summary>
        </member>
        <member name="P:Azure.Core.ReferenceTypeAttribute.OptionalProperties">
            <summary>
            Get an array of property names that are optional when comparing the type.
            </summary>
        </member>
        <member name="T:Azure.Core.SerializationConstructorAttribute">
            <summary>
            An attribute class indicating to AutoRest which constructor to use for serialization.
            </summary>
        </member>
        <member name="T:Azure.Core.TypeReferenceTypeAttribute">
            <summary>
            An attribute class indicating to Autorest a reference type which can replace a type in target SDKs.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Usage">
            <summary>
            Gets or sets a coma separated list of additional model usage modes. Allowed values: model, error, intput, output.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Formats">
            <summary>
            Gets or sets a coma separated list of additional model serialization formats.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Core.AsyncLockWithValue`1">
            <summary>
            Primitive that combines async lock and value cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.GetLockOrValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method that either returns cached value or acquire a lock.
            If one caller has acquired a lock, other callers will be waiting for the lock to be released.
            If value is set, lock is released and all waiters get that value.
            If value isn't set, the next waiter in the queue will get the lock.
            </summary>
            <param name="async"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.HasValue">
            <summary>
            Returns true if lock contains the cached value. Otherwise false.
            </summary>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.Value">
            <summary>
            Returns cached value if it was set when lock has been created. Throws exception otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value isn't set.</exception>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.LockOrValue.SetValue(`0)">
            <summary>
            Set value to the cache and to all the waiters.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.InvalidOperationException">Value is set already.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternal.Succeeded(Azure.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="T:Azure.Core.IOperation">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
        </member>
        <member name="M:Azure.Core.IOperation.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />
            don't need to be updated. Operation-specific properties, such as "<c>CreateOn</c>" or "<c>LastModified</c>",
            must be manually updated by the operation implementing this method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&gt; IOperation.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState.Failure(response.GetRawResponse());<br />
                return OperationState.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationState.Success(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. If left <c>null</c>,
            a default exception is created based on the <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.RawResponse">
            <summary>
            The last HTTP response received from the server. Its update already handled in calls to "<c>UpdateStatus</c>" and
            "<c>WaitForCompletionAsync</c>", but custom methods not supported by this class, such as "<c>CancelOperation</c>",
            must update it as well.
            <example>Usage example:
            <code>
              public Response GetRawResponse() =&gt; _operationInternal.RawResponse;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.HasCompleted">
            <summary>
            Returns <c>true</c> if the long-running operation has completed.
            <example>Usage example:
            <code>
              public bool HasCompleted =&gt; _operationInternal.HasCompleted;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&gt; UpdateStatusAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.UpdateStatusAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public Response UpdateStatus(CancellationToken cancellationToken) =&gt; _operationInternal.UpdateStatus(cancellationToken);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server. <strong></strong></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal`1">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation`1" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal`1" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal`1" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.HasValue" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.Value" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Succeeded(Azure.Response,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="value">The final result of the long-running operation.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation{`0},Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal`1" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation`1" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation`1" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.HasValue">
            <summary>
            Returns <c>true</c> if the long-running operation completed successfully and has produced a final result.
            <example>Usage example:
            <code>
              public bool HasValue =&gt; _operationInternal.HasValue;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.Value">
            <summary>
            The final result of the long-running operation.
            <example>Usage example:
            <code>
              public T Value =&gt; _operationInternal.Value;
            </code>
            </example>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the operation has not completed yet.</exception>
            <exception cref="T:Azure.RequestFailedException">Thrown when the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then use as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the property <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />
            property and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.IOperation`1">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal`1" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.IOperation`1.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal`1" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> or
            <see cref="P:Azure.Core.OperationInternal`1.Value" />, don't need to be updated. Operation-specific properties, such
            as "<c>CreateOn</c>" or "<c>LastModified</c>", must be manually updated by the operation implementing this
            method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&lt;T&gt;&gt; IOperation&lt;T&gt;.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState&lt;T&gt;.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState&lt;T&gt;.Failure(response.GetRawResponse());<br />
                return OperationState&lt;T&gt;.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState`1" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState`1">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal`1" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="value">The final result of the long-running operation.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> or <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. The same exception will be thrown when
            <see cref="P:Azure.Core.OperationInternal`1.Value" /> is called. If left <c>null</c>, a default exception is created based on the
            <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Azure.Core.DelayStrategy">
            <summary>
            Strategy to control delay behavior.
            </summary>
        </member>
        <member name="M:Azure.Core.DelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the interval of next delay iteration.
            </summary>
            <remarks> Note that the value could change per call. </remarks>
            <param name="response"> Server response. </param>
            <param name="suggestedInterval"> Suggested pollingInterval. It is up to strategy
            implementation to decide how to deal with this parameter. </param>
            <returns> Delay interval of next iteration. </returns>
        </member>
        <member name="T:Azure.Core.ConstantDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> with constant polling interval.
            </summary>
            <remarks>Polling interval is always equal to the given polling interval.</remarks>
        </member>
        <member name="M:Azure.Core.ConstantDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.ExponentialDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" />. Polling interval changes according to
            the sequence {1, 1, 1, 2, 4, ...32}.
            </summary>
            <remarks>Polling interval always follows the given sequence.</remarks>
        </member>
        <member name="M:Azure.Core.ExponentialDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from {1, 1, 1, 2, 4, ...32}.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
        </member>
        <member name="T:Azure.Core.RetryAfterDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> of which the interval is from
            retry-after header of service response.
            </summary>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.#ctor(Azure.Core.DelayStrategy)">
            <summary>
            Create a <see cref="T:Azure.Core.RetryAfterDelayStrategy" /> with a default retry-after value which normally
            comes from the initial response of an LRO operation.
            </summary>
            <param name="fallbackStrategy"> Fallback strategy if retry after is not present. </param>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of retry-after header of given service response and <paramref name="suggestedInterval" />.
            If retry-after header is not found, adopt the value of last retry-after header.
            </summary>
            <param name="response">Service response which might carry retry-after header.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of retry-after header and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.OperationPoller">
            <summary>
            Implementation of LRO polling logic.
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(Azure.Core.ClientOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="options">The customer provided client options object.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients; use default (null)
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(System.String,System.String,Azure.Core.DiagnosticsOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="optionsNamespace">Namespace of the client class, such as Azure.Storage or Azure.AppConfiguration.</param>
            <param name="providerNamespace">Azure Resource Provider namespace of the Azure service SDK is primarily used for.</param>
            <param name="diagnosticsOptions">The customer provided client diagnostics options.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients, use default (null) for old clients
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.AddLink(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds a link to the scope. This must be called before <see cref="M:Azure.Core.Pipeline.DiagnosticScope.Start" /> has been called for the DiagnosticScope.
            </summary>
            <param name="traceparent">The traceparent for the link.</param>
            <param name="tracestate">The tracestate for the link.</param>
            <param name="attributes">Optional attributes to associate with the link.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.SetTraceparent(System.String)">
            <summary>
            Sets the trace parent for the current scope.
            </summary>
            <param name="traceparent">The trace parent to set for the current scope.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.DiagnosticScope.ActivityKind">
            <summary>
            Kind describes the relationship between the Activity, its parents, and its children in a Trace.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Internal">
            <summary>
            Default value.
            Indicates that the Activity represents an internal operation within an application, as opposed to an operations with remote parents or children.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Server">
            <summary>
            Server activity represents request incoming from external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Client">
            <summary>
            Client activity represents outgoing request to the external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Producer">
            <summary>
            Producer activity represents output provided to external components.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Consumer">
            <summary>
            Consumer activity represents output received from an external component.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until we can reference the 5.0 of System.Diagnostics.DiagnosticSource
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.Argument">
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.AssertEnumDefined(System.Type,System.Object,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not defined for <paramref name="enumType" />.
            </summary>
            <param name="enumType">The type to validate against.</param>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not defined for <paramref name="enumType" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T" /> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity" /> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1" /> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> amount of data was written to the output <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count" /> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="T:Azure.Core.ForwardsClientCallsAttribute">
            <summary>
            Marks methods that call methods on other client and don't need their diagnostics verified.
            </summary>
        </member>
        <member name="M:Azure.Core.ForwardsClientCallsAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Azure.Core.ForwardsClientCallsAttribute" />.
            </summary>
        </member>
        <member name="M:Azure.Core.ForwardsClientCallsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Azure.Core.ForwardsClientCallsAttribute" />.
            </summary>
            <param name="skipChecks"> Sets whether or not diagnostic scope validation should happen. </param>
        </member>
        <member name="P:Azure.Core.ForwardsClientCallsAttribute.SkipChecks">
            <summary>
            Gets whether or not we should validate DiagnosticScope for this API.
            In the case where there is an internal API that makes the Azure API call and a public API that uses it we need ForwardsClientCalls.
            If the public API will cache the results then the diagnostic scope will not always be created because an Azure API is not always called.
            In this case we need to turn off this validation for this API only.
            </summary>
        </member>
        <member name="M:Azure.Core.ChangeTrackingDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary><returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary><returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="M:Azure.Core.ChangeTrackingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ArmRestApiCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#Models#ArmRestApi}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ArmRestApiCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ArmRestApiCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#Models#ArmRestApi}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#ResourceGroupResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#ResourceGroupResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#ResourceProviderResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceProviderCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#ResourceProviderResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#TenantResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#TenantResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#DataPolicyManifestResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DataPolicyManifestCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#DataPolicyManifestResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#FeatureResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeatureCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#FeatureResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#ManagementGroupPolicyDefinitionResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicyDefinitionCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#ManagementGroupPolicyDefinitionResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#ManagementGroupPolicySetDefinitionResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementGroupPolicySetDefinitionCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#ManagementGroupPolicySetDefinitionResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#ManagementLockResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLockCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#ManagementLockResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#PolicyAssignmentResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#PolicyAssignmentResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#SubscriptionResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#SubscriptionResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#SubscriptionPolicyDefinitionResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicyDefinitionCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#SubscriptionPolicyDefinitionResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#SubscriptionPolicySetDefinitionResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionPolicySetDefinitionCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#SubscriptionPolicySetDefinitionResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#TenantPolicyDefinitionResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicyDefinitionCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#TenantPolicyDefinitionResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#Resources#TenantPolicySetDefinitionResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantPolicySetDefinitionCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#Resources#TenantPolicySetDefinitionResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.System#Collections#Generic#IEnumerable{Azure#ResourceManager#ManagementGroups#ManagementGroupResource}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.System#Collections#Generic#IAsyncEnumerable{Azure#ResourceManager#ManagementGroups#ManagementGroupResource}#GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param><returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
